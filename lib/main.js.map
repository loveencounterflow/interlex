{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,OAAA,EAAA,SAAA,EAAA,KAAA,EAAA,UAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,SAAA,EAAA,GAAA,EAAA,YAAA,EAAA,aAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,EAAA,GAAA,EAAA,QAAA,EAAA,iBAAA;;;EAGA,CAAA,CAAE,UAAF,EACE,IADF,EAEE,WAFF,EAGE,UAHF,EAIE,KAJF,EAKE,KALF,EAME,IANF,EAOE,GAPF,CAAA,GAO4B,OAAA,CAAQ,WAAR,CAP5B;;EAQA,CAAA,CAAE,GAAF,EACE,GADF,EAEE,YAFF,EAGE,MAHF,EAIE,QAJF,EAKE,iBALF,CAAA,GAK4B,OAAA,CAAQ,WAAR,CAL5B,EAXA;;;EAoBA,SAAA,GAAY,IAAA,CAAU,YAAN,MAAA,UAAA;IACd,WAAa,CAAA,CAAA;AACf,UAAA;MAAI,GAAA,GAAkB,OAAA,CAAQ,OAAR,EAAtB;;MAEI,IAAC,CAAA,UAAD,GAAwB;MACxB,IAAC,CAAA,KAAD,GAAwB;MACxB,IAAC,CAAA,eAAD,GAAwB,IAJ5B;;MAMI,IAAC,CAAA,OAAD,GAAwB,GAAG,CAAC,KAAK,CAAA,6DAAA;MACjC,IAAC,CAAA,cAAD,GAAwB;MACxB,IAAC,CAAA,aAAD,GAAwB;QACtB;UAAE,KAAA,EAAO,KAAT;UAAiB,MAAA,EAAQ,MAAzB;UAAiC,OAAA,EAAS,GAAG,CAAC,KAAK,CAAA,aAAA,CAAA,CAAiB,IAAC,CAAA,cAAlB,CAAA,MAAA;QAAnD,CADsB;QAEtB;UAAE,KAAA,EAAO,KAAT;UAAiB,MAAA,EAAQ,MAAzB;UAAiC,OAAA,EAAS,GAAG,CAAC,KAAK,CAAA,aAAA,CAAA,CAAiB,IAAC,CAAA,OAAlB,CAAA,MAAA;QAAnD,CAFsB;QAGtB;UAAE,KAAA,EAAO,IAAT;UAAiB,MAAA,EAAQ,MAAzB;UAAiC,OAAA,EAAS,GAAG,CAAC,KAAK,CAAA,aAAA,CAAA,CAAiB,IAAC,CAAA,cAAlB,CAAA,MAAA;QAAnD,CAHsB;QAItB;UAAE,KAAA,EAAO,IAAT;UAAiB,MAAA,EAAQ,MAAzB;UAAiC,OAAA,EAAS,GAAG,CAAC,KAAK,CAAA,aAAA,CAAA,CAAiB,IAAC,CAAA,OAAlB,CAAA,MAAA;QAAnD,CAJsB;QAR5B;;;MAgBI,IAAC,CAAA,cAAD,GAA8B;MAC9B,IAAC,CAAA,sBAAD,GAA8B;MAC9B,IAAC,CAAA,wBAAD,GAA8B;MAC9B,IAAC,CAAA,uBAAD,GAA8B;MAC9B,IAAC,CAAA,yBAAD,GAA8B,MApBlC;;MAuBI,IAAC,CAAA,oBAAD,GAAwB,CAAE,KAAF,CAAA,GAAA;QACtB,IAAO,CAAE,OAAO,KAAT,CAAA,KAAoB,QAA3B;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,8BAAA,CAAA,CAAiC,GAAA,CAAI,KAAJ,CAAjC,CAAA,CAAV,EADR;;QAEA,KAAO,IAAC,CAAA,cAAc,CAAC,IAAhB,CAAqB,KAArB,CAAP;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,uCAAA,CAAA,CAA0C,GAAA,CAAI,KAAJ,CAA1C,CAAA,CAAV,EADR;;AAEA,eAAO;MALe,EAvB5B;;MA+BI,IAAC,CAAA,qBAAD,GAAyB,CAAC,CAAE,KAAF,EAAS,IAAT,CAAD,CAAA,GAAA;AAC7B,YAAA,kBAAA,EAAA,mBAAA;;;AAEM,gBAAO,IAAP;AAAA,eACO,KADP;YAEI,kBAAA,GAAsB,IAAC,CAAA;YACvB,mBAAA,GAAsB,IAAC,CAAA;AAFpB;AADP,eAIO,OAJP;YAKI,kBAAA,GAAsB,IAAC,CAAA;YACvB,mBAAA,GAAsB,IAAC,CAAA;AAFpB;AAJP;YAOO,MAAM,IAAI,KAAJ,CAAU,CAAA,uCAAA,CAAA,CAA0C,GAAA,CAAI,IAAJ,CAA1C,CAAA,CAAV;AAPb;QAQA,KAAA,GAAU,IAAC,CAAA,oBAAD,iBAAsB,QAAQ,EAA9B;QACV,KAAA,GAAU,KAAK,CAAC,OAAN,CAAc,kBAAd,EAAkC,EAAlC;QACV,KAAA,IAAU;AACV,eAAO,IAAC,CAAA,yBAAD,CAA2B,KAA3B;MAdgB,EA/B7B;;MAgDI,IAAC,CAAA,yBAAD,GAA6B,CAAE,IAAF,CAAA,GAAA;eAAY,CAAE,GAAA,CAAE,IAAI,GAAJ,CAAQ,IAAR,CAAF,CAAF,CAAwB,CAAC,IAAzB,CAAA,CAA+B,CAAC,IAAhC,CAAqC,EAArC;MAAZ,EAhDjC;;MAmDI,IAAC,CAAA,eAAD,GAAmB,CAAE,KAAF,CAAA,GAAA,EAAA;;;QAGjB,MAAO,KAAA,YAAiB,OAAxB;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,+BAAA,CAAA,CAAkC,GAAA,CAAI,KAAJ,CAAlC,CAAA,CAAV,EADR;;AAEA,eAAO,IAAI,MAAJ,CAAW,KAAK,CAAC,MAAjB,EAA2B,IAAC,CAAA,qBAAD,CAAuB;UAAE,KAAA,EAAO,KAAK,CAAC,KAAf;UAAsB,IAAA,EAAM;QAA5B,CAAvB,CAA3B;MALU,EAnDvB;;MA2DI,IAAC,CAAA,0BAAD,GAA8B,QAAA,CAAE,OAAF,CAAA;eAAe,OAAO,CAAC,IAAR,CAAa,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;UACxD,IAAa,CAAC,CAAC,MAAF,GAAW,CAAC,CAAC,MAA1B;AAAA,mBAAO,CAAC,EAAR;;UACA,IAAa,CAAC,CAAC,MAAF,GAAW,CAAC,CAAC,MAA1B;AAAA,mBAAO,CAAC,EAAR;;AACA,iBAAQ;QAHgD,CAAb;MAAf,EA3DlC;;AAiEI,aAAO;IAlEI;;EADC,CAAJ,CAAA,CAAA,EApBZ;;;EA0FA,aAAA,GAAgB,QAAA,CAAE,eAAe,IAAjB,CAAA;AAChB,QAAA,KAAA,EAAA;IAAE,CAAA,CAAE,KAAF,CAAA,GAAgB,SAAS,CAAC,eAA1B;IACA,YAAA,GAAgB,SAAS,CAAC,qBAAV,CAAgC;MAAE,KAAA,EAAO,YAAT;MAAuB,IAAA,EAAM;IAA7B,CAAhC,EADlB;;IAGE,YAAA,GAAgB,QAAA,CAAA,GAAE,CAAF,CAAA;aAAY,CAAE,KAAA,CAAM,YAAN,CAAF,CAAA,CAAuB,GAAA,CAAvB;IAAZ,EAHlB;;AAKE,WAAO,IAAI,KAAJ,CAAU,YAAV,EACL;MAAA,GAAA,EAAK,QAAA,CAAE,MAAF,EAAU,GAAV,CAAA;AACT,YAAA;QAAM,IAAwB,OAAO,GAAP,KAAc,QAAtC;AAAA,iBAAO,OAAP;;QACA,KAAA,GAAQ,YAAA,GAAe;QACvB,KAAA,GAAQ,SAAS,CAAC,yBAAV,CAAsC,KAAtC;QACR,KAAA,GAAQ,SAAS,CAAC,qBAAV,CAAoC;UAAE,KAAF;UAAS,IAAA,EAAM;QAAf,CAApC;AACR,eAAO,KAAA,CAAM,KAAN;MALJ;IAAL,CADK;EANO,EA1FhB;;;EAyGA,EAAA,GAAK,aAAA,CAAA,EAzGL;;;EA6GM,QAAN,MAAA,MAAA,CAAA;;IAGE,WAAa,CAAE,GAAF,CAAA;AACf,UAAA,YAAA,EAAA;MAAI,YAAA,GACE;QAAA,IAAA,EAAc,IAAd;QACA,KAAA,EAAc,IADd;QAEA,OAAA,EAAc,IAFd;QAGA,OAAA,EAAc,IAHd;QAIA,IAAA,EAAc,IAJd;QAKA,KAAA,EAAc;MALd,EADN;;MAQI,GAAA,GAAc,CAAE,GAAA,YAAF,EAAmB,GAAA,GAAnB;MACd,IAAC,CAAA,IAAD,GAAc,GAAG,CAAC;MAClB,GAAG,CAAC,OAAJ,GAAc,SAAS,CAAC,eAAV,CAA0B,GAAG,CAAC,OAA9B;MACd,IAAA,CAAK,IAAL,EAAQ,OAAR,EAAgC,GAAG,CAAC,KAApC;MACA,IAAA,CAAK,IAAL,EAAQ,SAAR,EAAgC,GAAG,CAAC,KAAK,CAAC,OAA1C;MACA,IAAA,CAAK,IAAL,EAAQ,SAAR,EAAgC,GAAG,CAAC,OAApC;MACA,IAAA,CAAK,IAAL,EAAQ,MAAR,6EAAgF,IAAhF;MACA,IAAA,CAAK,IAAL,EAAQ,OAAR,EAAgC,GAAG,CAAC,KAApC,EAfJ;;MAiBI,IAAA,CAAK,IAAL,EAAQ,qBAAR;AAA+B,gBAAO,IAAP;AAAA,eACxB,IAAC,CAAA,KAAD,KAAU,KADc;mBACoB;AADpB,eAExB,IAAC,CAAA,KAAD,KAAU,IAFc;mBAEoB;AAFpB,eAGxB,IAAC,CAAA,KAAD,KAAU,QAHc;mBAGoB;AAHpB,eAIxB,IAAC,CAAA,KAAD,KAAU,MAJc;mBAIoB;AAJpB,eAKtB,GAAA,CAAI,GAAG,CAAC,QAAR,EAAkB,IAAC,CAAA,KAAnB,CALsB;mBAKoB;AALpB;YAMxB,MAAM,IAAI,KAAJ,CAAU,CAAA,mDAAA,CAAA,CAAoD,GAAA,CAAI,IAAC,CAAA,KAAL,CAApD,CAAA,CAAV;AANkB;mBAA/B;AAOA,aAAO;IAzBI,CADf;;;IA6BE,QAAU,CAAE,KAAF,EAAS,MAAT,CAAA;AACZ,UAAA;MAAI,IAAC,CAAA,OAAO,CAAC,SAAT,GAAqB;MACrB,IAAmB,4CAAnB;AAAA,eAAO,KAAP;;AACA,aAAO,IAAI,MAAJ,CAAW,IAAX,EAAc,KAAd;IAHC,CA7BZ;;;IAmCgB,OAAb,WAAa,CAAE,IAAF,EAAQ,QAAQ,IAAhB,CAAA;AAChB,UAAA,MAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,OAAA,EAAA,GAAA,EAAA;MAAI,IAAmB,YAAnB;AAAA,eAAO,KAAP;;MACA,KAAA,GAAQ;AACR;MAAA,KAAA,qCAAA;SAAI,CAAE,KAAF,EAAS,MAAT,EAAiB,OAAjB;QACF,IAAS,qCAAT;AAAA,gBAAA;;MADF;MAEA,IAAO,aAAP;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,uCAAA,CAAA,CAA0C,GAAA,CAAI,IAAJ,CAA1C,CAAA,CAAV,EADR;;MAEA,CAAA,CAAE,MAAF,CAAA,GAAc,KAAK,CAAC,MAApB;MACA,IAAG,eAAA,IAAW,CAAE,MAAA,KAAU,KAAK,CAAC,IAAlB,CAAd;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,wCAAA,CAAA,CAA2C,GAAA,CAAI,MAAJ,CAA3C,CAAA,CAAV,EADR;;AAEA,aAAO,CAAE,IAAF,EAAQ,KAAR,EAAe,MAAf,EAAuB,MAAvB;IAVK;;EArChB,EA7GA;;;EAgKM,SAAN,MAAA,OAAA,CAAA;;IAGE,WAAa,CAAE,KAAF,EAAS,KAAT,CAAA;MACX,IAAC,CAAA,IAAD,GAAwB,KAAK,CAAC;MAC9B,IAAC,CAAA,GAAD,GAAwB,KAAK,CAAE,CAAF;MAC7B,IAAC,CAAA,KAAD,GAAwB,KAAK,CAAC;MAC9B,IAAC,CAAA,IAAD,GAAwB,IAAC,CAAA,KAAD,GAAS,IAAC,CAAA,GAAG,CAAC;MACtC,IAAC,CAAA,IAAD,GAAwB,KAAK,CAAC;MAC9B,IAAC,CAAA,KAAD,GAAwB;MACxB,IAAC,CAAA,GAAD,GAAwB,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;MAC5C,IAAC,CAAA,IAAD,GAAwB,MAAM,CAAC,MAAP,CAAc,IAAd;MACxB,UAAA,CAAW,IAAX,EAAc,QAAd,EAAwB,CAAA,CAAA,GAAA;eAAG,CAAA,CAAA,CAAG,IAAC,CAAA,KAAK,CAAC,IAAV,CAAA,CAAA,CAAA,CAAkB,IAAC,CAAA,IAAnB,CAAA;MAAH,CAAxB;MACA,UAAA,CAAW,IAAX,EAAc,QAAd,EAAwB,CAAA,CAAA,GAAA;eAAG,IAAC,CAAA,GAAG,CAAC;MAAR,CAAxB,EATJ;;MAWI,IAAC,CAAA,MAAD,CAAQ,KAAK,CAAC,MAAd;MACA,IAAC,CAAA,SAAD,CAAW,KAAK,CAAC,KAAjB;MACA,WAAA,CAAY,IAAZ,EAAe,UAAf,EAA8B,CAAA,CAAA,GAAA;AAClC,YAAA;QAAM,KAAA,cAAA;AAAA,iBAAO;QAAP;AACA,eAAO;MAFqB,CAA9B,EAbJ;;AAiBI,aAAO;IAlBI,CADf;;;IAsBE,MAAQ,CAAA,CAAA;AACV,UAAA;MAAI,CAAA,GAAU,KAAA,CAAM,IAAN;MACV,CAAC,CAAC,IAAF,GAAU,KAAA,CAAM,IAAC,CAAA,IAAP;AACV,aAAO;IAHD,CAtBV;;;IA4BE,SAAW,CAAE,KAAF,CAAA,EAAA;;MAET,IAAC,CAAA,KAAD,GAAS;AACT,aAAO;IAHE,CA5Bb;;;IAkCE,MAAQ,CAAA,GAAE,CAAF,CAAA;aAAY,MAAM,CAAC,MAAP,CAAc,IAAC,CAAA,IAAf,EAAqB,GAAA,CAArB;IAAZ;;EApCV,EAhKA;;;EAwMM,QAAN,MAAA,MAAA,CAAA;;IAGE,WAAa,CAAE,GAAF,CAAA;AACf,UAAA,GAAA,EAAA;;QAAI,MAAkB,CAAA;;MAClB,IAAC,CAAA,IAAD,oCAA6B;MAC7B,IAAA,CAAK,IAAL,EAAgB,SAAhB,EAA4B,GAAG,CAAC,OAAhC;MACA,IAAA,CAAK,IAAL,EAAgB,QAAhB,EAA4B,CAAE,GAAA,sCAAe,EAAf,CAAF,CAA5B;MACA,WAAA,CAAY,IAAZ,EAAgB,UAAhB,EAA4B,CAAA,CAAA,GAAA;eAAG,IAAC,CAAA,OAAO,CAAC,GAAG,CAAC;MAAhB,CAA5B;AACA,aAAO;IANI,CADf;;;IAUqB,EAAnB,CAAC,MAAM,CAAC,QAAR,CAAmB,CAAA,CAAA;AAAE,UAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA;AAAC;AAAA;MAAA,KAAA,qCAAA;;qBAAA,CAAA,MAAM,CAAN;MAAA,CAAA;;IAAH,CAVrB;;;IAaE,SAAW,CAAE,GAAF,CAAA;AACb,UAAA;MAAI,IAAG,mBAAA,IAAe,GAAG,CAAC,KAAJ,KAAe,IAAjC;QACE,MAAM,IAAI,KAAJ,CAAU,6BAAV,EADR;;MAEA,IAAC,CAAA,MAAM,CAAC,IAAR,CAAa,KAAA,GAAQ,IAAI,KAAJ,CAAU;QAAE,GAAA,GAAF;QAAU,KAAA,EAAO;MAAjB,CAAV,CAArB;AACA,aAAO;IAJE,CAbb;;;IAoBE,YAAc,CAAE,KAAF,EAAS,MAAT,CAAA;AAChB,UAAA,CAAA,EAAA,MAAA,EAAA;MAAI,CAAA,GAAI;MACJ,KAAA,aAAA;QACE,IAAgB,gDAAhB;AAAA,mBAAA;;QACA,CAAC,CAAC,IAAF,CAAO,MAAP;MAFF;AAGA,aAAO;IALK,CApBhB;;;IA4BE,cAAgB,CAAE,KAAF,EAAS,MAAT,CAAA;AAClB,UAAA,MAAA,EAAA;MAAI,KAAA,aAAA;QACE,IAAiB,gDAAjB;AAAA,iBAAO,OAAP;;MADF;AAEA,aAAO;IAHO,CA5BlB;;;IAkCE,gBAAkB,CAAE,KAAF,EAAS,MAAT,CAAA;AACpB,UAAA;MAAI,IAAuB,CAAE,OAAA,GAAU,IAAC,CAAA,YAAD,CAAc,KAAd,EAAqB,MAArB,CAAZ,CAAyC,CAAC,MAA1C,KAAoD,CAA3E;AAAA,eAAO,KAAP;;MACA,IAAuB,OAAO,CAAC,MAAR,KAAkB,CAAzC;AAAA,eAAO,OAAO,CAAE,CAAF,EAAd;OADJ;;;;;;AAOI,aAAO,CAAE,SAAS,CAAC,0BAAV,CAAqC,OAArC,CAAF,CAAgD,CAAE,CAAF;IARvC,CAlCpB;;;IA6CE,QAAU,CAAE,KAAF,EAAS,MAAT,CAAA;AACZ,UAAA,MAAA,EAAA,MAAA,EAAA;AAAI,cAAO,IAAC,CAAA,QAAR;AAAA,aACO,OADP;UACwB,MAAA,GAAS,IAAC,CAAA,cAAD,CAAmB,KAAnB,EAA0B,MAA1B;AAA1B;AADP,aAEO,SAFP;UAEwB,MAAA,GAAS,IAAC,CAAA,gBAAD,CAAmB,KAAnB,EAA0B,MAA1B;AAA1B;AAFP;UAGO,MAAM,IAAI,KAAJ,CAAU,CAAA,4CAAA,CAAA,CAA+C,GAAA,CAAI,IAAC,CAAA,QAAL,CAA/C,CAAA,CAAV;AAHb;MAMA,IAAqB,cAArB;;;AAAA,eAAO,KAAP;;MACA,MAAqB,CAAE,MAAM,CAAC,GAAP,KAAc,EAAhB,CAAA,IAAyB,CAAM,mBAAN,EAA9C;AAAA,eAAO,OAAP;;MACA,CAAA,CAAE,MAAF,EACE,KADF,CAAA,GACY,MADZ;MAEA,OAAA,GAAY,MAAM,yBAAN,GAAiC,GAAjC,GAAuC,MAAM;MACzD,MAAM,IAAI,KAAJ,CAAU,CAAA,iDAAA,CAAA,CAAoD,GAAA,CAAI,MAAJ,CAApD,CAAA,aAAA,CAAA,CAA8E,MAAM,CAAC,KAArF,CAAA,oBAAA,CAAA,CAAiH,GAAA,CAAI,OAAJ,CAAjH,CAAA,CAAA,CAAV;IAZE;;EA/CZ,EAxMA;;;EAuQM,UAAN,MAAA,QAAA,CAAA;;IAGE,WAAa,CAAE,GAAF,CAAA;AACf,UAAA;MAAI,YAAA,GACE;QAAA,IAAA,EAAgB,GAAhB;QACA,QAAA,EAAgB,OADhB;QAEA,YAAA,EAAgB,IAFhB;QAGA,WAAA,EAAgB;MAHhB,EADN;;;QAMI,IAAC,CAAA,MAAyB,CAAE,GAAA,YAAF,EAAmB,GAAA,GAAnB;;MAC1B,KAAuC,IAAC,CAAA,GAAG,CAAC,YAA5C;QAAA,IAAC,CAAA,GAAG,CAAC,WAAL,GAA0B,MAA1B;;MACA,IAAC,CAAA,IAAD,GAA0B,IAAC,CAAA,GAAG,CAAC;MAC/B,IAAC,CAAA,KAAD,GAA0B;QAAE,GAAA,EAAK;MAAP;MAC1B,IAAC,CAAA,gBAAD,GAA0B;MAC1B,IAAA,CAAK,IAAL,EAAQ,eAAR,EAA0B,IAA1B;MACA,IAAA,CAAK,IAAL,EAAQ,aAAR,EAA0B,IAA1B;MACA,IAAA,CAAK,IAAL,EAAQ,QAAR,EAA0B,CAAA,CAA1B,EAbJ;;MAeI,IAAC,CAAA,SAAD,CAAW,CAAX;MACA,IAAC,CAAA,iBAAD,CAAA;AACA,aAAO;IAlBI,CADf;;;IAsBE,SAAW,CAAE,MAAM,CAAR,CAAA;MACT,IAAC,CAAA,KAAK,CAAC,GAAP,GAAa;AACb,aAAO;IAFE,CAtBb;;;IA2BE,iBAAmB,CAAA,CAAA;AACrB,UAAA;MAAI,OAAA,GAAU,IAAC,CAAA,SAAD,CAAW;QAAE,IAAA,EAAM;MAAR,CAAX;MACV,IAAA,CAAK,IAAL,EAAQ,eAAR,EACE;QAAA,KAAA,EAAQ,OAAO,CAAC,SAAR,CAAkB;UAAE,IAAA,EAAM,OAAR;UAAiB,OAAA,EAAS;QAA1B,CAAlB,CAAR;QACA,IAAA,EAAQ,OAAO,CAAC,SAAR,CAAkB;UAAE,IAAA,EAAM,MAAR;UAAiB,OAAA,EAAS;QAA1B,CAAlB,CADR;QAEA,IAAA,EAAQ,OAAO,CAAC,SAAR,CAAkB;UAAE,IAAA,EAAM,MAAR;UAAiB,OAAA,EAAS;QAA1B,CAAlB,CAFR;QAGA,KAAA,EAAQ,OAAO,CAAC,SAAR,CAAkB;UAAE,IAAA,EAAM,OAAR;UAAiB,OAAA,EAAS;QAA1B,CAAlB;MAHR,CADF;AAKA,aAAO;IAPU,CA3BrB;;;IAqCE,SAAW,CAAE,GAAF,CAAA;AACb,UAAA,SAAA,EAAA;MAAI,SAAA,GAAY,GAAG,CAAC,IAAI,CAAC,UAAT,CAAoB,GAApB;MACZ,IAAG,6BAAH;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,eAAA,CAAA,CAAkB,GAAA,CAAI,KAAK,CAAC,IAAV,CAAlB,CAAA,eAAA,CAAV,EADR;;MAEA,KAAA,GAA0B,IAAI,KAAJ,CAAU;QAAE,GAAA,GAAF;QAAU,OAAA,EAAS;MAAnB,CAAV;MAC1B,IAAC,CAAA,MAAM,CAAE,KAAK,CAAC,IAAR,CAAP,GAA0B;MAC1B,IAAG,CAAE,CAAI,SAAN,CAAA,IAAsB,CAAM,wBAAN,CAAzB;QACE,IAAA,CAAK,IAAL,EAAQ,aAAR,EAAuB,KAAvB;QACA,IAAC,CAAA,gBAAD,GAAoB,KAAK,CAAC,KAF5B;;AAGA,aAAO;IATE,CArCb;;;IAiDE,WAAa,CAAE,IAAF,EAAQ,GAAR,EAAa,MAAb,EAAqB,OAAO,IAA5B,CAAA;AACf,UAAA;MAAI,CAAA,GAAU,IAAC,CAAA,aAAa,CAAE,IAAF,CAAQ,CAAC,QAAvB,CAAgC,GAAhC,EAAqC,MAArC;MACV,CAAC,CAAC,MAAF,CAAS,IAAT;AACA,aAAO;IAHI,CAjDf;;;IAuDE,iBAAmB,CAAE,IAAF,EAAQ,KAAR,EAAe,IAAf,EAAqB,MAArB,EAA6B,OAA7B,CAAA;AACrB,UAAA;MAAI,CAAA,GAAU,IAAC,CAAA,WAAD,CAAa,OAAb,EAAsB,KAAtB,EAA6B,MAA7B,EAAqC,CAAE,IAAF,EAAQ,OAAR,CAArC;MACV,CAAC,CAAC,IAAF,GAAU;MACV,CAAC,CAAC,GAAF,GAAU,MAAM;AAChB,aAAO;IAJU,CAvDrB;;;IA8DE,gBAAkB,CAAE,KAAF,EAAS,MAAT,EAAiB,UAAjB,EAA6B,QAA7B,CAAA;AAChB,aAAO,IAAC,CAAA,WAAD,CAAa,MAAb,EAAqB,KAArB,EAA4B,MAA5B,EAAoC,CAAE,UAAF,EAAc,QAAd,CAApC;IADS,CA9DpB;;;IAkEE,YAAc,CAAA,GAAE,CAAF,CAAA;aAAY,CAAE,GAAA,CAAE,IAAC,CAAA,IAAD,CAAM,GAAA,CAAN,CAAF,CAAF;IAAZ,CAlEhB;;;IAqEE,UAAY,CAAA,GAAE,CAAF,CAAA;AACd,UAAA;MAAI,KAAA,yBAAA;QACE,IAAqB,MAAM,CAAC,KAAK,CAAC,IAAb,KAAqB,SAA1C;AAAA,iBAAO,OAAP;;MADF;AAEA,aAAO;IAHG,CArEd;;;IA2EQ,EAAN,IAAM,CAAE,MAAF,CAAA;MACJ;AAAW,gBAAO,IAAP;AAAA,eACJ,IAAC,CAAA,GAAG,CAAC,WADD;mBACuB,IAAC,CAAA,oBAAD,CAA8B,MAA9B;AADvB,eAEJ,IAAC,CAAA,GAAG,CAAC,YAFD;mBAEuB,IAAC,CAAA,2BAAD,CAA8B,MAA9B;AAFvB;mBAGuB,IAAC,CAAA,uBAAD,CAA8B,MAA9B;AAHvB;;AAIX,aAAO;IALH,CA3ER;;;IAmF2B,EAAzB,uBAAyB,CAAE,MAAF,CAAA;AAC3B,UAAA;MAAI,KAAA,kDAAA;QACE,IAAgB,CAAE,MAAM,CAAC,MAAP,KAAiB,eAAnB,CAAA,IAAwC,CAAE,MAAM,CAAC,KAAK,CAAC,IAAb,KAAuB,SAAzB,CAAxD;UAAA,MAAM,OAAN;;MADF;AAEA,aAAO;IAHgB,CAnF3B;;;IAyFwB,EAAtB,oBAAsB,CAAE,MAAF,CAAA,EAAA;;;AACxB,UAAA,MAAA,EAAA,IAAA,EAAA,SAAA,EAAA;MACI,MAAA,GAAS;MACT,KAAA,kDAAA,GAAA;;QAEE,IAAG,MAAM,CAAC,MAAP,KAAiB,cAApB;UACE,MAAM,CAAC,IAAP,CAAY,MAAZ;AACA,mBAFF;SADN;;QAKM,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;UACE,MAAM;AACN,mBAFF;SALN;;QASM,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;UACE,MAAM,MAAM,CAAC,GAAP,CAAA;UACN,MAAM;AACN,mBAHF;SATN;;QAcM,IAAA,GAAsB,MAAM,CAAC,EAAP,CAAW,CAAX;QAEtB,SAAA,GAAsB,MAAM,CAAC,EAAP,CAAU,CAAC,CAAX;QACtB,IAAI,CAAC,IAAL,GAAsB,SAAS,CAAC;QAChC,IAAI,CAAC,MAAL,CAAY;UAAE,QAAA,EAAU,SAAS,CAAC,IAAI,CAAC;QAA3B,CAAZ;QACA,MAAM,CAAC,MAAP,GAAsB;QACtB,MAAM;QACN,MAAM;MAtBR,CAFJ;;AA0BI,aAAO;IA3Ba,CAzFxB;;;IAuH+B,EAA7B,2BAA6B,CAAE,MAAF,CAAA;AAC/B,UAAA,QAAA,EAAA,QAAA,EAAA;MAAI,QAAA,GAAc;MACd,QAAA,GAAc,MAAM,CAAC,OADzB;;MAGI,KAAA,oCAAA;AACE,gBAAO,IAAP;;AAAA,eAEO,MAAM,CAAC,MAAP,KAAiB,cAFxB;YAGI,IAAG,MAAM,CAAC,IAAP,KAAiB,QAApB;cACE,MAAM,IAAC,CAAA,iBAAD,CAAmB,WAAnB,EAAgC,MAAM,CAAC,IAAvC,EAA6C,QAA7C,EAAuD,MAAvD,EACJ,CAAA,iBAAA,CAAA,CAAoB,QAApB,CAAA,MAAA,CAAA,CAAqC,GAAA,CAAI,MAAM,CAAC,IAAX,CAArC,CAAA,CADI,EADR;;AADG;;AAFP,eAOO,MAAM,CAAC,KAAK,CAAC,IAAb,KAAqB,SAP5B;YAQI;AADG;;AAPP,eAUO,QAAA,IAAa,CAAE,MAAM,CAAC,KAAP,KAAkB,CAApB,CAVpB;YAWI,MAAM,IAAC,CAAA,iBAAD,CAAmB,WAAnB,EAAgC,CAAhC,EAAmC,MAAM,CAAC,KAA1C,EAAiD,MAAjD,EACJ,CAAA,yBAAA,CAAA,CAA4B,GAAA,CAAI,MAAM,CAAC,KAAX,CAA5B,CAAA,CADI;AAXV,SAAN;;QAcM,MAAM;QACN,QAAA,GAAc;MAhBhB,CAHJ;;AAqBI,aAAO;IAtBoB,CAvH/B;;;IAgJiB,EAAf,aAAe,CAAE,MAAF,CAAA;AACjB,UAAA,aAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAA;MAAI,OAAA,GAAgB;MAChB,aAAA,GAAgB,KADpB;;MAGI,mBAAA,GAAsB,QAAA,CAAE,MAAF,EAAU,OAAV,CAAA;AAC1B,YAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA,GAAA,EAAA;QAAM,CAAA,GAAI,MAAM,CAAC,MAAP,CAAc,IAAd;QACJ,KAAA,yCAAA;;AACE;UAAA,KAAA,UAAA;;YACE,kBAAE,CAAC,CAAE,GAAF,IAAD,CAAC,CAAE,GAAF,IAAW,EAAd,CAAkB,CAAC,IAAnB,CAAwB,KAAxB;UADF;QADF;QAGA,MAAM,CAAC,MAAP,CAAc,CAAd;AACA,eAAO;MANa,EAH1B;;MAWI,KAAA,GAAQ,SAAA,CAAA,CAAA;AACZ,YAAA,WAAA,EAAA,GAAA,EAAA;QAAM,IAAmB,qBAAnB;AAAA,iBAAO,KAAP;;QACA,MAAA,GAAS,CAAE,OAAO,CAAC,EAAR,CAAW,CAAX,CAAF,CAAgB,CAAC,MAAjB,CAAA;QACT,WAAA,GAAc,OAAO,CAAC,EAAR,CAAW,CAAC,CAAZ;QACd,MAAM,CAAC,GAAP,GAAc;;AAAE;UAAA,KAAA,yCAAA;;yBAAA,GAAG,CAAC;UAAJ,CAAA;;YAAF,CAA8B,CAAC,IAA/B,CAAoC,EAApC;QACd,MAAM,CAAC,IAAP,GAAc,WAAW,CAAC;AAC1B,gBAAO,MAAM,CAAC,KAAK,CAAC,mBAApB;AAAA,eACO,QADP;YACqB,MAAM,CAAC,MAAP,CAAc,GAAA;;AAAE;cAAA,KAAA,yCAAA;;6BAAA,GAAG,CAAC;cAAJ,CAAA;;gBAAF,CAAd;AAAd;AADP,eAEO,MAFP;YAEqB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAnB,CAAwB,IAAxB,EAA8B,CAAE,MAAF,EAAU,OAAV,CAA9B;AAAd;AAFP,eAGO,MAHP;YAGqB,mBAAA,CAAoB,MAApB,EAA4B,OAA5B;AAAd;AAHP;YAIO,MAAM,IAAI,KAAJ,CAAU,CAAA,iEAAA,CAAA,CAAoE,GAAA,CAAI,MAAM,CAAC,KAAK,CAAC,mBAAjB,CAApE,CAAA,CAAV;AAJb;QAKA,MAAM;QACN,aAAA,GAAgB;QAChB,OAAO,CAAC,MAAR,GAAiB;AACjB,eAAO;MAdD,EAXZ;;MA2BI,KAAA,4CAAA;QACE,IAAG,CAAE,CAAI,MAAM,CAAC,KAAK,CAAC,KAAnB,CAAA,IAA8B,CAAE,MAAM,CAAC,KAAK,CAAC,IAAb,KAAqB,SAAvB,CAAjC;UACE,OAAW,KAAA,CAAA;UACX,MAAM;AACN,mBAHF;;QAIA,IAAG,MAAM,CAAC,MAAP,KAAiB,aAApB;UACE,OAAO,CAAC,IAAR,CAAa,MAAb;AACA,mBAFF;;QAGA,OAAW,KAAA,CAAA;QACX,aAAA,GAAgB,MAAM,CAAC;QACvB,OAAO,CAAC,IAAR,CAAa,MAAb;MAVF;AAWA,aAAO;IAvCM,CAhJjB;;;IA0LyB,EAAvB,qBAAuB,CAAE,MAAF,CAAA;AACzB,UAAA,MAAA,EAAA,UAAA,EAAA;MAAI,UAAA,GAAa;MACb,MAAM,IAAC,CAAA,WAAD,CAAa,OAAb,EAAsB,CAAtB,EAAyB,MAAzB;MACN,KAAA,2CAAA;QACE,IAAuB,MAAM,CAAC,KAAK,CAAC,IAAb,KAAuB,SAA9C;UAAA,UAAA,GAAa,OAAb;;QACA,MAAM;MAFR;MAGA,MAAM,IAAC,CAAA,WAAD,CAAa,MAAb,wEAA0C,CAA1C,EAA+C,MAA/C;MACN,IAAC,CAAA,KAAK,CAAC,GAAP;AACA,aAAO;IARc,CA1LzB;;;IAqMwB,EAAtB,oBAAsB,CAAE,MAAF,CAAA;AACxB,UAAA,IAAA,EAAA,UAAA,EAAA,WAAA,EAAA,KAAA,EAAA,MAAA,EAAA,SAAA,EAAA,cAAA,EAAA,KAAA,EAAA;MAAI,KAAA,GAAkB;MAClB,KAAA,GAAkB,IAAI,UAAJ,CAAe,IAAC,CAAA,WAAhB;MAClB,MAAA,GAAkB;MAClB,cAAA,GAAkB,KAHtB;;MAKI,MAAM,IAAC,CAAA,gBAAD,CAAkB,CAAlB,EAAqB,MAArB,EAA6B,IAA7B,EAAmC,IAAC,CAAA,WAAW,CAAC,IAAhD;AAEN,aAAA,IAAA,GAAA;;QACE,KAAA,GAAgB,KAAK,CAAC,IAAN,CAAA;QAChB,SAAA,GAAgB;QAChB,MAAA,GAAgB,KAAK,CAAC,QAAN,CAAe,KAAf,EAAsB,MAAtB;QAChB,IAAa,cAAb;AAAA,gBAAA;;QACA,KAAA,GAAgB,MAAM,CAAC;QACvB,WAAA,GAAgB;QAChB,UAAA,GAAgB,MANtB;;QAQM,IAAG,4BAAH;AACE,kBAAO,IAAI,CAAC,MAAZ;AAAA,iBACO,MADP;cACoB,KAAK,CAAC,IAAN,CAAW,CAAE,SAAA,GAAY,IAAC,CAAA,UAAD,CAAY,IAAI,CAAC,MAAjB,CAAd,CAAX;AAAb;AADP,iBAEO,MAFP;cAEoB,SAAA,GAAY,KAAK,CAAC,QAAN,CAAA;AAAzB;AAFP;cAGO,MAAM,IAAI,KAAJ,CAAU,CAAA,kDAAA,CAAA,CAAqD,GAAA,CAAI,MAAM,CAAC,IAAI,CAAC,MAAhB,CAArD,CAAA,CAAV;AAHb;UAIA,IAAG,IAAI,CAAC,KAAR;YACE,WAAA,GAAe;YACf,MAAM,CAAC,SAAP,CAAiB,SAAjB,EAFF;WAAA,MAAA;YAIE,UAAA,GAAe,KAJjB;WALF;SARN;;QAmBM,IAAG,WAAH;UAAoB,MAAM,IAAC,CAAA,gBAAD,CAAkB,MAAM,CAAC,KAAzB,EAAgC,MAAhC,EAA+C,KAAK,CAAC,IAArD,EAA2D,MAAM,CAAC,KAAK,CAAC,IAAxE,EAA1B;;QACA,MAAM;QACN,IAAG,UAAH;UAAoB,MAAM,IAAC,CAAA,gBAAD,CAAyB,KAAzB,EAAgC,MAAhC,EAAwC,MAAM,CAAC,KAAK,CAAC,IAArD,EAA8D,SAAS,CAAC,IAAxE,EAA1B;;MAtBF,CAPJ;;AA+BI,aAAM,CAAI,KAAK,CAAC,QAAhB;QACE,MAAM,IAAC,CAAA,gBAAD,CAAkB,KAAlB,EAAyB,MAAzB,EAAmC,KAAK,CAAC,QAAN,CAAe,IAAf,CAAnC,EAA4D,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAA5D;MADR;AAEA,aAAO;IAlCa,CArMxB;;;IA0OE,UAAY,CAAE,UAAF,CAAA;AACd,UAAA;MAAI,IAAY,qCAAZ;AAAA,eAAO,EAAP;;MACA,MAAM,IAAI,KAAJ,CAAU,CAAA,uBAAA,CAAA,CAA0B,GAAA,CAAI,UAAJ,CAA1B,CAAA,CAAV;IAFI;;EA5Od,EAvQA;;;EAyfA,MAAM,CAAC,OAAP,GAAiB,CACf,KADe,EAEf,MAFe,EAGf,KAHe,EAIf,OAJe,EAKf,SALe,EAMf,EANe,EAOf,aAPe;AAzfjB",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\n{ Levelstack\n  hide\n  hide_getter\n  set_getter\n  clone\n  debug\n  info\n  rpr                   } = require './helpers'\n{ std\n  isa\n  isa_optional\n  create\n  validate\n  validate_optional     } = require 'cleartype'\n\n\n#===========================================================================================================\ninternals = new class Internals\n  constructor: ->\n    SLR             = require 'regex'\n    #.........................................................................................................\n    @Levelstack           = Levelstack\n    @clone                = clone\n    @slevithan_regex      = SLR\n    ### thx to https://github.com/sindresorhus/identifier-regex ###\n    @jsid_re              = SLR.regex\"\"\" [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* \"\"\"\n    @jump_spec_back       = '..'\n    @jump_spec_res        = [\n      { carry: false,  action: 'back', matcher: SLR.regex\"^ (?<target> #{ @jump_spec_back  } )   $\", }\n      { carry: false,  action: 'fore', matcher: SLR.regex\"^ (?<target> #{ @jsid_re         } )   $\", }\n      { carry: true,   action: 'back', matcher: SLR.regex\"^ (?<target> #{ @jump_spec_back  } ) ! $\", }\n      { carry: true,   action: 'fore', matcher: SLR.regex\"^ (?<target> #{ @jsid_re         } ) ! $\", }\n      ]\n    #.......................................................................................................\n    # thx to https://github.com/loveencounterflow/coffeescript/commit/27e0e4cfee65ec7e1404240ccec6389b85ae9e69\n    @regex_flags_re             = /^(?!.*(.).*\\1)[dgimsuvy]*$/\n    @forbidden_slr_flags_re     = /[uv]/g\n    @forbidden_plain_flags_re   = /[u]/g\n    @mandatory_slr_flags_txt    = 'dy'\n    @mandatory_plain_flags_txt  = 'dvy'\n\n    #-------------------------------------------------------------------------------------------------------\n    @validate_regex_flags = ( flags ) =>\n      unless ( typeof flags ) is 'string'\n        throw new Error \"Ωilx___1 expected a text, got #{rpr flags}\"\n      unless @regex_flags_re.test flags\n        throw new Error \"Ωilx___2 illegal or duplicate flags in #{rpr flags}\"\n      return flags\n\n    #-------------------------------------------------------------------------------------------------------\n    @normalize_regex_flags = ({ flags, mode, }) =>\n      ### Given a RegExp `flags` text, sets `d`, `y`, removes `u`, `v`, and returns sorted text with unique\n      flags. ###\n      switch mode\n        when 'slr'\n          forbidden_flags_re  = @forbidden_slr_flags_re\n          mandatory_flags_txt = @mandatory_slr_flags_txt\n        when 'plain'\n          forbidden_flags_re  = @forbidden_plain_flags_re\n          mandatory_flags_txt = @mandatory_plain_flags_txt\n        else throw new Error \"Ωilx___3 internal error: unknown mode: #{rpr mode}\"\n      flags   = @validate_regex_flags flags ? ''\n      flags   = flags.replace forbidden_flags_re, ''\n      flags  += mandatory_flags_txt\n      return @get_unique_sorted_letters flags\n\n    #-------------------------------------------------------------------------------------------------------\n    @get_unique_sorted_letters = ( text ) => [ ( new Set text )..., ].sort().join ''\n\n    #-------------------------------------------------------------------------------------------------------\n    @normalize_regex = ( regex ) =>\n      ### Given a `regex`, return a new regex with the same pattern but normalized flags. ###\n      ### TAINT use proper typing ###\n      unless regex instanceof RegExp\n        throw new Error \"Ωilx___4 expected a regex, got #{rpr regex}\"\n      return new RegExp regex.source, ( @normalize_regex_flags { flags: regex.flags, mode: 'plain', } )\n\n    #-------------------------------------------------------------------------------------------------------\n    @sort_lexemes_by_length_dec = ( lexemes ) -> lexemes.sort ( a, b ) ->\n      return -1 if a.length > b.length\n      return +1 if a.length < b.length\n      return  0\n\n    #-------------------------------------------------------------------------------------------------------\n    return undefined\n\n#-----------------------------------------------------------------------------------------------------------\nnew_regex_tag = ( global_flags = null ) ->\n  { regex }     = internals.slevithan_regex\n  global_flags  = internals.normalize_regex_flags { flags: global_flags, mode: 'slr', }\n  #.........................................................................................................\n  tag_function  = ( P... ) -> ( regex global_flags ) P...\n  #.........................................................................................................\n  return new Proxy tag_function,\n    get: ( target, key ) ->\n      return undefined unless typeof key is 'string'\n      flags = global_flags + key\n      flags = internals.get_unique_sorted_letters   flags\n      flags = internals.normalize_regex_flags     { flags, mode: 'slr', }\n      return regex flags\n\n#-----------------------------------------------------------------------------------------------------------\nrx = new_regex_tag()\n\n\n#===========================================================================================================\nclass Token\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg_template =\n      name:         null\n      level:        null\n      grammar:      null\n      matcher:      null\n      jump:         null\n      merge:        false\n    #.......................................................................................................\n    cfg         = { cfg_template..., cfg..., }\n    @name       = cfg.name\n    cfg.matcher = internals.normalize_regex cfg.matcher\n    hide @, 'level',                cfg.level\n    hide @, 'grammar',              cfg.level.grammar\n    hide @, 'matcher',              cfg.matcher\n    hide @, 'jump',                 ( @constructor._parse_jump cfg.jump, @level ) ? null\n    hide @, 'merge',                cfg.merge\n    ### TAINT use proper typing ###\n    hide @, 'data_merge_strategy', switch true\n      when @merge is false                        then null\n      when @merge is true                         then 'list'\n      when @merge is 'assign'                     then 'assign'\n      when @merge is 'list'                       then 'list'\n      when ( isa std.function, @merge )           then 'call'\n      else throw new Error \"Ωilx__11 expected a valid input for `merge`, got #{rpr @merge}\"\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  match_at: ( start, source ) ->\n    @matcher.lastIndex = start\n    return null unless ( match = source.match @matcher )?\n    return new Lexeme @, match\n\n  #---------------------------------------------------------------------------------------------------------\n  @_parse_jump: ( spec, level = null ) ->\n    return null unless spec?\n    match = null\n    for { carry, action, matcher, } in internals.jump_spec_res\n      break if ( match = spec.match matcher )?\n    unless match?\n      throw new Error \"Ωilx___5 encountered illegal jump spec #{rpr spec}\"\n    { target, } = match.groups\n    if level? and ( target is level.name )\n      throw new Error \"Ωilx___6 cannot jump to same level, got #{rpr target}\"\n    return { spec, carry, action, target, }\n\n\n#===========================================================================================================\nclass Lexeme\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( token, match ) ->\n    @name                 = token.name\n    @hit                  = match[ 0 ]\n    @start                = match.index\n    @stop                 = @start + @hit.length\n    @jump                 = token.jump\n    @token                = token\n    @lnr                  = token.grammar.state.lnr\n    @data                 = Object.create null\n    set_getter @, 'fqname', => \"#{@level.name}.#{@name}\"\n    set_getter @, 'length', => @hit.length\n    #.......................................................................................................\n    @assign match.groups\n    @set_level token.level\n    hide_getter @, 'has_data',    =>\n      return true for _ of @data\n      return false\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _clone: ->\n    R       = clone @\n    R.data  = clone @data\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  set_level: ( level ) ->\n    ### TAINT should typecheck ###\n    @level = level\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  assign: ( P... ) -> Object.assign @data, P...\n\n\n#===========================================================================================================\nclass Level\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg            ?= {}\n    @name           = cfg.name ? 'gnd'\n    hide @,         'grammar',  cfg.grammar\n    hide @,         'tokens',   [ ( cfg.tokens ? [] )..., ]\n    hide_getter @,  'strategy', => @grammar.cfg.strategy\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  [Symbol.iterator]: -> yield t for t in @tokens\n\n  #---------------------------------------------------------------------------------------------------------\n  new_token: ( cfg ) ->\n    if cfg.level? and cfg.level isnt @\n      throw new Error \"Ωilx___7 inconsistent level\"\n    @tokens.push token = new Token { cfg..., level: @, }\n    return token\n\n  #---------------------------------------------------------------------------------------------------------\n  match_all_at: ( start, source ) ->\n    R = []\n    for token from @\n      continue unless ( lexeme = token.match_at start, source )?\n      R.push lexeme\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  match_first_at: ( start, source ) ->\n    for token from @\n      return lexeme if ( lexeme = token.match_at start, source )?\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  match_longest_at: ( start, source ) ->\n    return null         if ( lexemes = @match_all_at start, source ).length is 0\n    return lexemes[ 0 ] if lexemes.length is 1\n    ### NOTE: Because JS guarantees stable sorts, we know that in case there were several lexemes with the\n    same maximum length, the ones that come earlier in the unsorted list (which corresponds to the order in\n    that the tokens got declared) will also come earlier after sorting; hence, the first lexeme in the list\n    after sorting will be one that has both maximum length (because of the sort) *and* come earlier in the\n    list of declarations (because of sort stability): ###\n    return ( internals.sort_lexemes_by_length_dec lexemes )[ 0 ]\n\n  #---------------------------------------------------------------------------------------------------------\n  match_at: ( start, source ) ->\n    switch @strategy\n      when 'first'    then  lexeme = @match_first_at    start, source\n      when 'longest'  then  lexeme = @match_longest_at  start, source\n      else throw new Error \"Ωilx___8 should never happen: got strategy: #{rpr @strategy}\"\n    #.......................................................................................................\n    ### Accept no lexeme matching but refuse lexeme with empty match: ###\n    return null   unless lexeme?\n    return lexeme unless ( lexeme.hit is '' ) and ( not lexeme.jump? )\n    { fqname\n      start } = lexeme\n    snippet   = source[ start - 10 ... start ] + '⚠' + source[ start .. start + 10 ]\n    throw new Error \"Ωilx___9 encountered zero-length match for token #{rpr fqname} at position #{lexeme.start} (indicated by '⚠': #{rpr snippet})\"\n\n\n#===========================================================================================================\nclass Grammar\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg_template =\n      name:           'g'\n      strategy:       'first'\n      emit_signals:   true\n      merge_jumps:    true\n    #.......................................................................................................\n    @cfg                   ?= { cfg_template..., cfg..., }\n    @cfg.merge_jumps        = false unless @cfg.emit_signals\n    @name                   = @cfg.name\n    @state                  = { lnr: null, }\n    @start_level_name       = null\n    hide @, 'system_tokens',  null\n    hide @, 'start_level',    null\n    hide @, 'levels',         {}\n    #.......................................................................................................\n    @reset_lnr 1\n    @_add_system_level()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  reset_lnr: ( lnr = 1 ) ->\n    @state.lnr = lnr\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_system_level: ->\n    $signal = @new_level { name: '$signal',  }\n    hide @, 'system_tokens',\n      start:  $signal.new_token { name: 'start', matcher: /|/, }\n      stop:   $signal.new_token { name: 'stop',  matcher: /|/, }\n      jump:   $signal.new_token { name: 'jump',  matcher: /|/, }\n      error:  $signal.new_token { name: 'error', matcher: /|/, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  new_level: ( cfg ) ->\n    is_system = cfg.name.startsWith '$'\n    if @levels[ cfg.name ]?\n      throw new Error \"Ωilx__10 level #{rpr level.name} elready exists\"\n    level                   = new Level { cfg..., grammar: @, }\n    @levels[ level.name ]   = level\n    if ( not is_system ) and ( not @start_level? )\n      hide @, 'start_level', level\n      @start_level_name = level.name\n    return level\n\n  #=========================================================================================================\n  _new_signal: ( name, idx, source, data = null ) ->\n    R       = @system_tokens[ name ].match_at idx, source\n    R.assign data\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_error_signal: ( kind, start, stop, source, message ) ->\n    R       = @_new_signal 'error', start, source, { kind, message, }\n    R.stop  = stop\n    R.hit   = source[ start .. stop ]\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_jump_signal: ( start, source, from_level, to_level ) ->\n    return @_new_signal 'jump', start, source, { from_level, to_level, }\n\n  #=========================================================================================================\n  scan_to_list: ( P... ) -> [ ( @scan P... )..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  scan_first: ( P... ) ->\n    for lexeme from @scan P...\n      return lexeme unless lexeme.level.name is '$signal'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  scan: ( source ) ->\n    yield from switch true\n      when @cfg.merge_jumps     then  @_scan_1b_merge_jumps         source\n      when @cfg.emit_signals    then  @_scan_2_validate_exhaustion  source\n      else                            @_scan_1a_remove_signals      source\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _scan_1a_remove_signals: ( source ) ->\n    for lexeme from @_scan_2_validate_exhaustion source\n      yield lexeme if ( lexeme.fqname is '$signal.error' ) or ( lexeme.level.name isnt '$signal' )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _scan_1b_merge_jumps: ( source ) ->\n    ### Consolidate all contiguous jump signals into single signal ###\n    buffer = []\n    for lexeme from @_scan_2_validate_exhaustion source\n      #.....................................................................................................\n      if lexeme.fqname is '$signal.jump'\n        buffer.push lexeme\n        continue\n      #.....................................................................................................\n      if buffer.length is 0\n        yield lexeme\n        continue\n      #.....................................................................................................\n      if buffer.length is 1\n        yield buffer.pop()\n        yield lexeme\n        continue\n      #.....................................................................................................\n      jump                = buffer.at  0\n      ### TAINT use API? ###\n      last_jump           = buffer.at -1\n      jump.stop           = last_jump.stop\n      jump.assign { to_level: last_jump.data.to_level, }\n      buffer.length       = 0\n      yield jump\n      yield lexeme\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _scan_2_validate_exhaustion: ( source ) ->\n    is_first    = true\n    last_idx    = source.length\n    #.......................................................................................................\n    for lexeme from @_scan_3_merge source\n      switch true\n        #...................................................................................................\n        when lexeme.fqname is '$signal.stop'\n          if lexeme.stop isnt last_idx\n            yield @_new_error_signal 'earlystop', lexeme.stop, last_idx, source, \\\n              \"expected stop at #{last_idx}, got #{rpr lexeme.stop}\"\n        #...................................................................................................\n        when lexeme.level.name is '$signal'\n          null\n        #...................................................................................................\n        when is_first and ( lexeme.start isnt 0 )\n          yield @_new_error_signal 'latestart', 0, lexeme.start, source, \\\n            \"expected start at 0, got #{rpr lexeme.start}\"\n      #.....................................................................................................\n      yield lexeme\n      is_first    = false\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _scan_3_merge: ( source ) ->\n    lexemes       = []\n    active_fqname = null\n    #.......................................................................................................\n    merge_data_as_lists = ( merged, lexemes ) ->\n      R = Object.create null\n      for lexeme in lexemes\n        for key, value of lexeme.data\n          ( R[ key ] ?= [] ).push value\n      merged.assign R\n      return null\n    #.......................................................................................................\n    flush = ->\n      return null unless active_fqname?\n      merged = ( lexemes.at 0 )._clone()\n      last_lexeme = lexemes.at -1\n      merged.hit  = ( lxm.hit for lxm in lexemes ).join ''\n      merged.stop = last_lexeme.stop\n      switch merged.token.data_merge_strategy\n        when 'assign' then merged.assign ( lxm.data for lxm in lexemes )...\n        when 'call'   then merged.token.merge.call null, { merged, lexemes, }\n        when 'list'   then merge_data_as_lists merged, lexemes\n        else throw new Error \"Ωilx__11 should never happen: encountered data_merge_strategy == #{rpr merged.token.data_merge_strategy}\"\n      yield merged\n      active_fqname = null\n      lexemes.length = 0\n      return null\n    #.......................................................................................................\n    for lexeme from @_scan_4_startstop_lnr source\n      if ( not lexeme.token.merge ) or ( lexeme.level.name is '$signal' )\n        yield from flush()\n        yield lexeme\n        continue\n      if lexeme.fqname is active_fqname\n        lexemes.push lexeme\n        continue\n      yield from flush()\n      active_fqname = lexeme.fqname\n      lexemes.push lexeme\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _scan_4_startstop_lnr: ( source ) ->\n    prv_lexeme = null\n    yield @_new_signal 'start', 0, source\n    for lexeme from @_scan_4_match_tokens source\n      prv_lexeme = lexeme if lexeme.level.name isnt '$signal'\n      yield lexeme\n    yield @_new_signal 'stop', ( prv_lexeme?.stop ? 0 ), source\n    @state.lnr++\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _scan_4_match_tokens: ( source ) ->\n    start           = 0\n    stack           = new Levelstack @start_level\n    lexeme          = null\n    old_level_name  = null\n    #.......................................................................................................\n    yield @_new_jump_signal 0, source, null, @start_level.name\n    #.......................................................................................................\n    loop\n      level         = stack.peek()\n      new_level     = level\n      lexeme        = level.match_at start, source\n      break unless lexeme? # terminate if current level has no matching tokens\n      start         = lexeme.stop\n      jump_before   = false\n      jump_after    = false\n      #.....................................................................................................\n      if ( jump = lexeme.jump )?\n        switch jump.action\n          when 'fore' then  stack.push ( new_level = @_get_level jump.target )\n          when 'back' then  new_level = stack.popnpeek()\n          else throw new Error \"Ωilx__12 should never happen: unknown jump action #{rpr lexeme.jump.action}\"\n        if jump.carry\n          jump_before  = true\n          lexeme.set_level new_level\n        else\n          jump_after   = true\n      #.....................................................................................................\n      if jump_before then yield @_new_jump_signal lexeme.start, source,        level.name, lexeme.level.name\n      yield lexeme\n      if jump_after  then yield @_new_jump_signal        start, source, lexeme.level.name,    new_level.name\n    #.......................................................................................................\n    while not stack.is_empty\n      yield @_new_jump_signal start, source, ( stack.pop_name null ), ( stack.peek_name null )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_level: ( level_name ) ->\n    return R if ( R = @levels[ level_name ] )?\n    throw new Error \"Ωilx__13 unknown level #{rpr level_name}\"\n\n\n#===========================================================================================================\nmodule.exports = {\n  Token\n  Lexeme\n  Level\n  Grammar\n  internals\n  rx\n  new_regex_tag }\n\n"
  ]
}