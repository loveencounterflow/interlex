{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,OAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,WAAA,EAAA,QAAA,EAAA,eAAA,EAAA,aAAA,EAAA,0BAAA,EAAA,0BAAA,EAAA,qBAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,aAAA,EAAA,OAAA,EAAA,KAAA,EAAA,GAAA,EAAA,EAAA;;;EAGA,CAAA,CAAE,IAAF,EACE,KADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,OAAA,CAAQ,WAAR,CAH5B,EAHA;;;;;EAUA,CAAA,CAAE,OAAF,EAAW,KAAX,CAAA,GAA4B,OAAA,CAAQ,OAAR,CAA5B;;EACA,QAAA,GAA4B,KAAK,CAAA,iEAAA;;EACjC,eAAA,GAA4B;;EAC5B,aAAA,GAA4B,KAAK,CAAA,YAAA,CAAA,CAAe,eAAf,CAAA,gBAAA,CAAA,CAAiD,QAAjD,CAAA,EAAA,EAbjC;;;EAeA,0BAAA,GAA8B;;EAC9B,0BAAA,GAA8B;;EAC9B,qBAAA,GAA4B,6BAjB5B;;;EAqBA,WAAA,GAAc,QAAA,CAAE,KAAF,EAAS,SAAT,CAAA;AACd,QAAA,KAAA,EAAA;IAAE,KAAA,GAAQ,IAAI,GAAJ,CAAQ,KAAK,CAAC,KAAd;IACR,KAAA,qBAAA;AACE,cAAO,IAAP;AAAA,aACO,0BAA0B,CAAC,IAA3B,CAAgC,QAAhC,CADP;UACqD,KAAK,CAAC,GAAN,CAAa,QAAb;AAA9C;AADP,aAEO,0BAA0B,CAAC,IAA3B,CAAgC,QAAhC,CAFP;UAEqD,KAAK,CAAC,MAAN,CAAa,QAAQ,CAAC,WAAT,CAAA,CAAb;AAA9C;AAFP;UAGO,MAAM,IAAI,KAAJ,CAAU,CAAA,4BAAA,CAAA,CAA+B,GAAA,CAAI,QAAJ,CAA/B,CAAA,IAAA,CAAA,CAAkD,GAAA,CAAI,SAAJ,CAAlD,CAAA,CAAV;AAHb;IADF;AAKA,WAAO,IAAI,MAAJ,CAAW,KAAK,CAAC,MAAjB,EAAyB,CAAE,GAAA,KAAF,CAAa,CAAC,IAAd,CAAmB,EAAnB,CAAzB;EAPK,EArBd;;;EA+BA,aAAA,GAAgB,QAAA,CAAE,QAAQ,IAAV,CAAA;AAChB,QAAA;IAAE,CAAA,GAAI,QAAA,CAAA,GAAE,CAAF,CAAA;aAAY,CAAE,KAAA,CAAM,KAAN,CAAF,CAAA,CAAgB,GAAA,CAAhB;IAAZ;AACJ,WAAO,IAAI,KAAJ,CAAU,CAAV,EACL;MAAA,GAAA,EAAK,QAAA,CAAE,MAAF,EAAU,GAAV,CAAA;AACT,YAAA;QAAM,IAAoB,GAAA,KAAO,MAAM,CAAC,WAAlC;AAAA,iBAAO,OAAP;;QACA,WAAA,GAAc,CAAE,GAAA,CAAE,CAAE,IAAI,GAAJ,CAAQ,KAAR,CAAF,CAAiB,CAAC,KAAlB,CAAwB,IAAI,GAAJ,CAAQ,GAAR,CAAxB,CAAF,CAAF,CAA+C,CAAC,IAAhD,CAAqD,EAArD;QACd,KAAO,qBAAqB,CAAC,IAAtB,CAA2B,WAA3B,CAAP;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,kCAAA,CAAA,CAAqC,GAAA,CAAI,GAAJ,CAArC,CAAA,CAAV,EADR;;AAEA,eAAS,KAAA,CAAM,WAAN;MALN;IAAL,CADK;EAFO,EA/BhB;;;EAyCA,EAAA,GAAK,aAAA,CAAA,EAzCL;;;EA6CM,QAAN,MAAA,MAAA,CAAA;;IAGE,WAAa,CAAE,GAAF,CAAA;AACf,UAAA,GAAA,EAAA;MAAI,IAAC,CAAA,IAAD,GAAQ,GAAG,CAAC,KAAhB;;MAEI,KAAO,CAAE,GAAG,CAAC,OAAJ,YAAuB,MAAzB,CAAP;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,2CAAA,CAAA,CAA8C,GAAA,CAAI,GAAG,CAAC,OAAR,CAA9C,CAAA,CAAV,EADR;;MAEA,KAAS,GAAG,CAAC,OAAO,CAAC,MAArB;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,wDAAA,CAAA,CAA2D,GAAA,CAAI,GAAG,CAAC,OAAO,CAAC,KAAhB,CAA3D,CAAA,CAAV,EADR;;MAEA,IAAA,CAAK,IAAL,EAAQ,OAAR,EAAwB,GAAG,CAAC,KAA5B;MACA,IAAA,CAAK,IAAL,EAAQ,SAAR,EAAwB,GAAG,CAAC,KAAK,CAAC,OAAlC;MACA,IAAA,CAAK,IAAL,EAAQ,SAAR,EAAwB,GAAG,CAAC,OAA5B;MACA,IAAA,CAAK,IAAL,EAAQ,MAAR,EAAwB,IAAC,CAAA,WAAW,CAAC,WAAb,kCAAoC,IAApC,CAAxB;MACA,IAAA,CAAK,IAAL,EAAQ,WAAR,qCAA4D,IAA5D;AACA,aAAO;IAZI,CADf;;;IAgBE,QAAU,CAAE,KAAF,EAAS,IAAT,CAAA;AACZ,UAAA;MAAI,IAAC,CAAA,OAAO,CAAC,SAAT,GAAqB;MACrB,IAAmB,0CAAnB;AAAA,eAAO,KAAP;;AACA,aAAO,IAAI,MAAJ,CAAW,IAAX,EAAc,KAAd;IAHC,CAhBZ;;;IAsBgB,OAAb,WAAa,CAAE,SAAF,CAAA;AAChB,UAAA;MAAI,IAAmB,iBAAnB;AAAA,eAAO,KAAP;OAAJ;;MAEI,IAAO,gDAAP;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,kDAAA,CAAA,CAAqD,GAAA,CAAI,SAAJ,CAArD,CAAA,CAAV,EADR;;MAEA,IAAyD,KAAK,CAAC,MAAM,CAAC,IAAtE;AAAA,eAAO;UAAE,MAAA,EAAQ,MAAV;UAAkB,MAAA,EAAQ;QAA1B,EAAP;;AACA,aAAO;QAAE,MAAA,EAAQ,MAAV;QAAkB,MAAA,EAAQ,KAAK,CAAC,MAAM,CAAC;MAAvC;IANK;;EAxBhB,EA7CA;;;EA+EM,SAAN,MAAA,OAAA,CAAA;;IAGE,WAAa,CAAE,KAAF,EAAS,KAAT,CAAA;AACf,UAAA,KAAA,EAAA,IAAA,EAAA;MAAI,IAAC,CAAA,IAAD,GAAc,KAAK,CAAC;MACpB,IAAC,CAAA,MAAD,GAAc,CAAA,CAAA,CAAG,KAAK,CAAC,KAAK,CAAC,IAAf,CAAA,CAAA,CAAA,CAAuB,KAAK,CAAC,IAA7B,CAAA;MACd,IAAC,CAAA,KAAD,GAAc,KAAK,CAAC;MACpB,IAAC,CAAA,GAAD,GAAc,KAAK,CAAE,CAAF;MACnB,IAAC,CAAA,KAAD,GAAc,KAAK,CAAC;MACpB,IAAC,CAAA,IAAD,GAAc,IAAC,CAAA,KAAD,GAAS,IAAC,CAAA,GAAG,CAAC;MAC5B,IAAC,CAAA,MAAD,wCAA6B;MAC7B,IAAC,CAAA,IAAD,GAAc,KAAK,CAAC;MACpB,IAAC,CAAA,SAAD,GAAc,KAAK,CAAC;MACpB,IAAA,GAAc,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC;MAChC,KAAA,GAAc,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;MAClC,IAAC,CAAE,IAAF,CAAD,GAAc;AACd,aAAO;IAbI;;EAHf,EA/EA;;;EAmGM,QAAN,MAAA,MAAA,CAAA;;IAGE,WAAa,CAAE,GAAF,CAAA;AACf,UAAA,GAAA,EAAA;;QAAI,MAAU,CAAA;;MACV,IAAC,CAAA,IAAD,oCAAqB;MACrB,IAAA,CAAK,IAAL,EAAQ,SAAR,EAAoB,GAAG,CAAC,OAAxB;MACA,IAAA,CAAK,IAAL,EAAQ,QAAR,EAAoB,CAAE,GAAA,sCAAe,EAAf,CAAF,CAApB;AACA,aAAO;IALI,CADf;;;IASqB,EAAnB,CAAC,MAAM,CAAC,QAAR,CAAmB,CAAA,CAAA;AAAE,UAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA;AAAC;AAAA;MAAA,KAAA,qCAAA;;qBAAA,CAAA,MAAM,CAAN;MAAA,CAAA;;IAAH,CATrB;;;IAYE,SAAW,CAAE,GAAF,CAAA;AACb,UAAA;MAAI,IAAG,mBAAA,IAAe,GAAG,CAAC,KAAJ,KAAe,IAAjC;QACE,MAAM,IAAI,KAAJ,CAAU,6BAAV,EADR;;MAEA,IAAC,CAAA,MAAM,CAAC,IAAR,CAAa,KAAA,GAAQ,IAAI,KAAJ,CAAU;QAAE,GAAA,GAAF;QAAU,KAAA,EAAO;MAAjB,CAAV,CAArB;AACA,aAAO;IAJE;;EAdb,EAnGA;;;EAyHM,QAAN,MAAA,MAAA,CAAA;;IAGE,WAAa,CAAA,GAAE,CAAF,CAAA;MACX,IAAC,CAAA,IAAD,GAAQ,KAAK,CAAC,IAAN,CAAW,GAAA,CAAX;AACR,aAAO;IAFI,CADf;;;IAME,QAAU,CAAA,CAAA;aAAG,IAAC,CAAA,IAAI,CAAC,MAAN,KAAgB;IAAnB,CANZ;;;IASE,IAAM,CAAA,CAAA;MACJ,IAAG,IAAC,CAAA,QAAD,CAAA,CAAH;QACE,MAAM,IAAI,KAAJ,CAAU,gBAAV,EADR;;AAEA,aAAO,IAAC,CAAA,IAAI,CAAC,EAAN,CAAS,CAAC,CAAV;IAHH,CATR;;;IAeE,GAAK,CAAA,CAAA;MACH,IAAG,IAAC,CAAA,QAAD,CAAA,CAAH;QACE,MAAM,IAAI,KAAJ,CAAU,gBAAV,EADR;;AAEA,aAAO,IAAC,CAAA,IAAI,CAAC,GAAN,CAAA;IAHJ,CAfP;;;IAqBE,IAAM,CAAA,GAAE,CAAF,CAAA;aAAY,IAAC,CAAA,IAAI,CAAC,IAAN,CAAW,GAAA,CAAX;IAAZ;;EAvBR,EAzHA;;;EAoJM,UAAN,MAAA,QAAA,CAAA;;IAGE,WAAa,CAAE,GAAF,CAAA;AACf,UAAA;MAAI,YAAA,GACE;QAAA,IAAA,EAAoB,GAApB;QACA,YAAA,EAAoB,SADpB;QAEA,aAAA,EAAoB,CAFpB;QAGA,YAAA,EAAoB;MAHpB;;QAIF,IAAC,CAAA,MAAmB,CAAE,GAAA,YAAF,EAAmB,GAAA,GAAnB;;MACpB,IAAC,CAAA,KAAD,GACE;QAAA,KAAA,EAAoB,IAAC,CAAA,GAAG,CAAC;MAAzB;MACF,IAAC,CAAA,IAAD,GAAoB,GAAG,CAAC;MACxB,IAAC,CAAA,gBAAD,GAAoB;MACpB,IAAA,CAAK,IAAL,EAAQ,aAAR,EAAuB,IAAvB;MACA,IAAA,CAAK,IAAL,EAAQ,QAAR,EAAoB,CAAA,CAApB;AACA,aAAO;IAbI,CADf;;;IAiBE,SAAW,CAAE,GAAF,CAAA;AACb,UAAA;MAAI,IAAG,6BAAH;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,eAAA,CAAA,CAAkB,GAAA,CAAI,KAAK,CAAC,IAAV,CAAlB,CAAA,eAAA,CAAV,EADR;;MAEA,KAAA,GAA0B,IAAI,KAAJ,CAAU;QAAE,GAAA,GAAF;QAAU,OAAA,EAAS;MAAnB,CAAV;MAC1B,IAAC,CAAA,MAAM,CAAE,KAAK,CAAC,IAAR,CAAP,GAA0B;MAC1B,IAAO,wBAAP;QACE,IAAA,CAAK,IAAL,EAAQ,aAAR,EAAuB,KAAvB;QACA,IAAC,CAAA,gBAAD,GAAoB,KAAK,CAAC,KAF5B;;AAGA,aAAO;IARE,CAjBb;;;IA4BE,UAAY,CAAA,GAAE,CAAF,CAAA;aAAY,CAAE,GAAA,CAAE,IAAC,CAAA,WAAD,CAAa,GAAA,CAAb,CAAF,CAAF;IAAZ,CA5Bd;;;IA+Be,EAAb,WAAa,CAAE,MAAF,CAAA;AACf,UAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA;MAAI,CAAA,CAAE,CAAF,CAAA,GAAQ,OAAA,CAAQ,iBAAR,CAAR;MACA,KAAA,GAAQ;MACR,KAAA,GAAQ,IAAI,KAAJ,CAAU,CAAE,IAAC,CAAA,WAAH,CAAV;AAER,aAAA,IAAA,GAAA;;QACE,MAAA,GAAU;QACV,KAAA,GAAU,KAAK,CAAC,IAAN,CAAA;QACV,KAAA,cAAA;UACE,IAAS,gDAAT;AAAA,kBAAA;;QADF;QAIA,IAAa,cAAb;;;AAAA,gBAAA;SANN;;QAQM,MAAM;QACN,IAAC,CAAA,KAAK,CAAC,KAAP,IAAgB,IAAC,CAAA,GAAG,CAAC;QACrB,KAAA,GAAgB,MAAM,CAAC;QAEvB,IAAgB,4BAAhB;;AAAA,mBAAA;;AACA,gBAAO,IAAI,CAAC,MAAZ;;AAAA,eAEO,MAFP;;YAII,IAAO,8CAAP;cACE,MAAM,IAAI,KAAJ,CAAU,CAAA,cAAA,CAAA,CAAiB,GAAA,CAAI,IAAI,CAAC,MAAT,CAAjB,CAAA,CAAV,EADR;;YAEA,KAAK,CAAC,IAAN,CAAW,SAAX;AACA,qBAPJ;;AAAA,eASO,MATP;YAUI,KAAK,CAAC,GAAN,CAAA;AACA;AAXJ,SAbN;;QA0BM,MAAM,IAAI,KAAJ,CAAU,CAAA,oBAAA,CAAA,CAAuB,GAAA,CAAI,MAAM,CAAC,IAAI,CAAC,MAAhB,CAAvB,CAAA,CAAV;MA3BR;AA4BA,aAAO;IAjCI;;EAjCf,EApJA;;;;;;;;;;EAmOA,MAAM,CAAC,OAAP,GAAiB,CACf,KADe,EAEf,MAFe,EAGf,KAHe,EAIf,OAJe,EAKf,KALe,EAMf,EANe,EAOf,aAPe,EAQf,WARe,EASf,QATe,EAUf,aAVe,EAWf,qBAXe;AAnOjB",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\n{ hide\n  debug\n  info\n  rpr                   } = require './helpers'\n#-----------------------------------------------------------------------------------------------------------\n### NOTE: may add punctuation later, therefore better to be restrictive ###\n### thx to https://github.com/sindresorhus/identifier-regex ###\n{ partial, regex, }       = require 'regex'\n_jsid_re                  = regex\"\"\" ^ [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* $ \"\"\"\n_jump_spec_back           = '..'\n_jump_spec_re             = regex\" (?<back> ^ #{_jump_spec_back} $ ) | (?<fore> #{_jsid_re} )\"\n# thx to https://github.com/loveencounterflow/coffeescript/commit/27e0e4cfee65ec7e1404240ccec6389b85ae9e69\n_valid_regex_flag_lower_re  = /^[dgimsuvy]$/\n_valid_regex_flag_upper_re  = /^[DGIMSUVY]$/\n_valid_regex_flags_re     = /^(?!.*(.).*\\1)[dgimsuvy]*$/\n\n\n#===========================================================================================================\n_copy_regex = ( regex, new_flags ) ->\n  flags = new Set regex.flags\n  for new_flag from new_flags\n    switch true\n      when _valid_regex_flag_lower_re.test new_flag then flags.add    new_flag\n      when _valid_regex_flag_upper_re.test new_flag then flags.delete new_flag.toLowerCase()\n      else throw new Error \"立ilx___1 invalid regex flag #{rpr new_flag} in #{rpr new_flags}\"\n  return new RegExp regex.source, [ flags..., ].join ''\n\n#===========================================================================================================\nnew_regex_tag = ( flags = 'dy' ) ->\n  R = ( P... ) -> ( regex flags ) P...\n  return new Proxy R,\n    get: ( target, key ) ->\n      return undefined if key is Symbol.toStringTag\n      local_flags = [ ( ( new Set flags ).union new Set key )..., ].join ''\n      unless _valid_regex_flags_re.test local_flags\n        throw new Error \"立ilx___2 invalid flags present in #{rpr key}\"\n      return ( regex local_flags )\n#-----------------------------------------------------------------------------------------------------------\nrx = new_regex_tag()\n\n\n#===========================================================================================================\nclass Token\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @name = cfg.name\n    ### TAINT use proper typing ###\n    unless ( cfg.matcher instanceof RegExp )\n      throw new Error \"立ilx___3 expected a regex for matcher, got #{rpr cfg.matcher}\"\n    unless ( cfg.matcher.sticky )\n      throw new Error \"立ilx___4 expected a sticky regex for matcher, got flags #{rpr cfg.matcher.flags}\"\n    hide @, 'level',        cfg.level\n    hide @, 'grammar',      cfg.level.grammar\n    hide @, 'matcher',      cfg.matcher\n    hide @, 'jump',         @constructor._parse_jump cfg.jump ? null\n    hide @, 'jump_spec',    cfg.jump                          ? null\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  match_at: ( start, text ) ->\n    @matcher.lastIndex = start\n    return null unless ( match = text.match @matcher )?\n    return new Lexeme @, match\n\n  #---------------------------------------------------------------------------------------------------------\n  @_parse_jump: ( jump_spec ) ->\n    return null unless jump_spec?\n    ### TAINT use cleartype ###\n    unless ( match = jump_spec.match _jump_spec_re )?\n      throw new Error \"立ilx___5 expected a well-formed jump literal, got #{rpr jump_spec}\"\n    return { action: 'back', target: null,              } if match.groups.back\n    return { action: 'fore', target: match.groups.fore, }\n\n\n#===========================================================================================================\nclass Lexeme\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( token, match ) ->\n    @name       = token.name\n    @fqname     = \"#{token.level.name}.#{token.name}\"\n    @level      = token.level\n    @hit        = match[ 0 ]\n    @start      = match.index\n    @stop       = @start + @hit.length\n    @groups     = match.groups ? null\n    @jump       = token.jump\n    @jump_spec  = token.jump_spec\n    name        = token.grammar.cfg.counter_name\n    count       = token.grammar.state.count\n    @[ name ]   = count\n    return undefined\n\n\n#===========================================================================================================\nclass Level\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg    ?= {}\n    @name   = cfg.name ? 'gnd'\n    hide @, 'grammar',  cfg.grammar\n    hide @, 'tokens',   [ ( cfg.tokens ? [] )..., ]\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  [Symbol.iterator]: -> yield t for t in @tokens\n\n  #---------------------------------------------------------------------------------------------------------\n  new_token: ( cfg ) ->\n    if cfg.level? and cfg.level isnt @\n      throw new Error \"立ilx___6 inconsistent level\"\n    @tokens.push token = new Token { cfg..., level: @, }\n    return token\n\n\n#===========================================================================================================\nclass Stack\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( P... ) ->\n    @data = Array.from P...\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  is_empty: -> @data.length is 0\n\n  #---------------------------------------------------------------------------------------------------------\n  peek: ->\n    if @is_empty()\n      throw new Error \"stack is empty\"\n    return @data.at -1\n\n  #---------------------------------------------------------------------------------------------------------\n  pop: ->\n    if @is_empty()\n      throw new Error \"stack is empty\"\n    return @data.pop()\n\n  #---------------------------------------------------------------------------------------------------------\n  push: ( P... ) -> @data.push P...\n\n\n#===========================================================================================================\nclass Grammar\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg_template      =\n      name:               'g'\n      counter_name:       'line_nr'\n      counter_value:      1\n      counter_step:       1\n    @cfg             ?= { cfg_template..., cfg..., }\n    @state            =\n      count:              @cfg.counter_value\n    @name             = cfg.name\n    @start_level_name = null\n    hide @, 'start_level', null\n    hide @, 'levels',   {}\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  new_level: ( cfg ) ->\n    if @levels[ cfg.name ]?\n      throw new Error \"立ilx___7 level #{rpr level.name} elready exists\"\n    level                   = new Level { cfg..., grammar: @, }\n    @levels[ level.name ]   = level\n    unless @start_level?\n      hide @, 'start_level', level\n      @start_level_name = level.name\n    return level\n\n  #---------------------------------------------------------------------------------------------------------\n  get_tokens: ( P... ) -> [ ( @walk_tokens P... )..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_tokens: ( source ) ->\n    { f } = require '../../effstring'\n    start = 0\n    stack = new Stack [ @start_level, ]\n    #.......................................................................................................\n    loop\n      lexeme  = null\n      level   = stack.peek()\n      for token from level\n        break if ( lexeme = token.match_at start, source )?\n      #.....................................................................................................\n      ### Terminate if none of the tokens of the current level has matched at the current position: ###\n      break unless lexeme?\n      #.....................................................................................................\n      yield lexeme\n      @state.count += @cfg.counter_step\n      start         = lexeme.stop\n      #.....................................................................................................\n      continue unless ( jump = lexeme.jump )?\n      switch jump.action\n        #...................................................................................................\n        when 'fore'\n          ### TAINT encapsulate ###\n          unless ( new_level = @levels[ jump.target ] )?\n            throw new Error \"unknown level #{rpr jump.target}\"\n          stack.push new_level\n          continue\n        #...................................................................................................\n        when 'back'\n          stack.pop()\n          continue\n      #.....................................................................................................\n      throw new Error \"unknown jump action #{rpr lexeme.jump.action}\"\n    return null\n\n\n  #===========================================================================================================\n  ###\n  `Token` defines `matcher`, can jump into a level or back\n  `Level` has one or more `Token`s\n  `Grammar` has one or more `Level`s\n  `Lexeme` produced by a `Token` instance when matcher matches source\n\n  ###\n\n\nmodule.exports = {\n  Token\n  Lexeme\n  Level\n  Grammar\n  regex\n  rx\n  new_regex_tag\n  _copy_regex\n  _jsid_re\n  _jump_spec_re\n  _valid_regex_flags_re }\n\n"
  ]
}