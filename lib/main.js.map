{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\n{ Levelstack\n  hide\n  hide_getter\n  set_getter\n  clone\n  # insert_position_marker\n  quote_source\n  # create_pod_from_template\n  debug\n  info\n  rpr                   } = require './helpers'\n{ type_of\n  std\n  isa\n  isa_optional\n  create\n  validate\n  validate_optional     } = require 'cleartype'\n\n\n#===========================================================================================================\ninternals = new class Internals\n  constructor: ->\n    SLR             = require 'regex'\n    #.........................................................................................................\n    @Levelstack           = Levelstack\n    @clone                = clone\n    @slevithan_regex      = SLR\n    ### thx to https://github.com/sindresorhus/identifier-regex ###\n    @jsid_re              = SLR.regex\"\"\" [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* \"\"\"\n    @jump_spec_back       = '..'\n    @jump_spec_res        = [\n      { carry: false,  action: 'back', fit: SLR.regex\"^ (?<target> #{ @jump_spec_back  } )   $\", }\n      { carry: false,  action: 'fore', fit: SLR.regex\"^ (?<target> #{ @jsid_re         } )   $\", }\n      { carry: true,   action: 'back', fit: SLR.regex\"^ (?<target> #{ @jump_spec_back  } ) ! $\", }\n      { carry: true,   action: 'fore', fit: SLR.regex\"^ (?<target> #{ @jsid_re         } ) ! $\", }\n      ]\n    @fqname_re            = SLR.regex\"^ (?<level_name> #{ @jsid_re } ) \\. (?<token_name> #{ @jsid_re } ) $\"\n    #.......................................................................................................\n    # thx to https://github.com/loveencounterflow/coffeescript/commit/27e0e4cfee65ec7e1404240ccec6389b85ae9e69\n    @regex_flags_re             = /^(?!.*(.).*\\1)[dgimsuvy]*$/\n    @forbidden_slr_flags_re     = /[uv]/g\n    @forbidden_plain_flags_re   = /[u]/g\n    @mandatory_slr_flags_txt    = 'dy'\n    @mandatory_plain_flags_txt  = 'dvy'\n\n    #-------------------------------------------------------------------------------------------------------\n    @validate_regex_flags = ( flags ) =>\n      unless ( typeof flags ) is 'string'\n        throw new Error \"Ωilx___1 expected a text, got #{rpr flags}\"\n      unless @regex_flags_re.test flags\n        throw new Error \"Ωilx___2 illegal or duplicate flags in #{rpr flags}\"\n      return flags\n\n    #-------------------------------------------------------------------------------------------------------\n    @normalize_regex_flags = ({ flags, mode, }) =>\n      ### Given a RegExp `flags` text, sets `d`, `y`, removes `u`, `v`, and returns sorted text with unique\n      flags. ###\n      switch mode\n        when 'slr'\n          forbidden_flags_re  = @forbidden_slr_flags_re\n          mandatory_flags_txt = @mandatory_slr_flags_txt\n        when 'plain'\n          forbidden_flags_re  = @forbidden_plain_flags_re\n          mandatory_flags_txt = @mandatory_plain_flags_txt\n        else throw new Error \"Ωilx___3 internal error: unknown mode: #{rpr mode}\"\n      flags   = @validate_regex_flags flags ? ''\n      flags   = flags.replace forbidden_flags_re, ''\n      flags  += mandatory_flags_txt\n      return @get_unique_sorted_letters flags\n\n    #-------------------------------------------------------------------------------------------------------\n    @get_unique_sorted_letters = ( text ) => [ ( new Set text )..., ].sort().join ''\n\n    #-------------------------------------------------------------------------------------------------------\n    @as_regex = ( text_or_regex ) =>\n      switch type = type_of text_or_regex\n        when 'regex'  then return text_or_regex\n        when 'text'   then return SLR.regex\"#{text_or_regex}\"\n        else throw new Error \"Ωilx___4 expected a text or a regex, got a #{type}\"\n\n    #-------------------------------------------------------------------------------------------------------\n    @normalize_regex = ( regex ) =>\n      ### Given a `regex`, return a new regex with the same pattern but normalized flags. ###\n      ### TAINT use proper typing ###\n      unless regex instanceof RegExp\n        throw new Error \"Ωilx___5 expected a regex, got #{rpr regex}\"\n      return new RegExp regex.source, ( @normalize_regex_flags { flags: regex.flags, mode: 'plain', } )\n\n    #-------------------------------------------------------------------------------------------------------\n    @sort_lexemes_by_length_dec = ( lexemes ) -> lexemes.sort ( a, b ) ->\n      return -1 if a.length > b.length\n      return +1 if a.length < b.length\n      return  0\n\n    #-------------------------------------------------------------------------------------------------------\n    return undefined\n\n#-----------------------------------------------------------------------------------------------------------\nnew_regex_tag = ( global_flags = null ) ->\n  { regex }     = internals.slevithan_regex\n  global_flags  = internals.normalize_regex_flags { flags: global_flags, mode: 'slr', }\n  #.........................................................................................................\n  tag_function  = ( P... ) -> ( regex global_flags ) P...\n  #.........................................................................................................\n  return new Proxy tag_function,\n    get: ( target, key ) ->\n      return undefined unless typeof key is 'string'\n      flags = global_flags + key\n      flags = internals.get_unique_sorted_letters   flags\n      flags = internals.normalize_regex_flags     { flags, mode: 'slr', }\n      return regex flags\n\n#-----------------------------------------------------------------------------------------------------------\nrx = new_regex_tag()\n\n\n#===========================================================================================================\nclass Token\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg_template =\n      name:         null\n      level:        null\n      grammar:      null\n      fit:          null\n      jump:         null\n      merge:        false\n      emit:         true\n      cast:         null\n    #.......................................................................................................\n    cfg         = { cfg_template..., cfg..., }\n    @name       = cfg.name\n    cfg.fit     = internals.normalize_regex internals.as_regex cfg.fit\n    hide @, 'level',                cfg.level\n    hide @, 'grammar',              cfg.level.grammar\n    hide @, 'fit',                  cfg.fit\n    hide @, 'jump',                 ( @constructor._parse_jump cfg.jump, @level ) ? null\n    hide @, 'merge',                cfg.merge\n    hide @, 'emit',                 cfg.emit\n    hide @, 'cast',                 cfg.cast\n    ### TAINT use proper typing ###\n    hide @, 'data_merge_strategy', switch true\n      when @merge is false                        then null\n      when @merge is true                         then 'list'\n      when @merge is 'assign'                     then 'assign'\n      when @merge is 'list'                       then 'list'\n      when ( isa std.function, @merge )           then 'call'\n      else throw new Error \"Ωilx___6 expected a valid input for `merge`, got #{rpr @merge}\"\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  match_at: ( start, source ) -> @_match_at start, source\n\n  #---------------------------------------------------------------------------------------------------------\n  _match_at: ( start, source, fit = null ) ->\n    @fit.lastIndex = start\n    return null unless ( match = source.match fit ? @fit )?\n    return new Lexeme @, match\n\n  #---------------------------------------------------------------------------------------------------------\n  match_any_at: ( start, source ) ->\n    ### Same as `@match_at()` but doesn't test for match, so matches always ###\n    @fit.lastIndex = start\n    return null unless ( match = source.match /|/ )?\n    return new Lexeme @, match\n\n  #---------------------------------------------------------------------------------------------------------\n  @_parse_jump: ( spec, level = null ) ->\n    return null unless spec?\n    match = null\n    for { carry, action, fit, } in internals.jump_spec_res\n      break if ( match = spec.match fit )?\n    unless match?\n      throw new Error \"Ωilx___7 encountered illegal jump spec #{rpr spec}\"\n    { target, } = match.groups\n    if level? and ( target is level.name )\n      throw new Error \"Ωilx___8 cannot jump to same level, got #{rpr target}\"\n    return { spec, carry, action, target, }\n\n\n#===========================================================================================================\nclass Lexeme\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( token, match ) ->\n    @name                 = token.name\n    @hit                  = match[ 0 ]\n    @start                = match.index\n    @stop                 = @start + @hit.length\n    @jump                 = token.jump\n    @token                = token\n    @lnr                  = token.grammar.state.lnr\n    # @terminate            = token.termin\n    @data                 = Object.create null\n    set_getter @, 'fqname',     => \"#{@level.name}.#{@name}\"\n    set_getter @, 'length',     => @hit.length\n    # set_getter @, 'is_error',   => @token.level.name in [ '$error', 'error', ]\n    set_getter @, 'is_error',   => /^\\$?error$/.test @token.level.name\n    set_getter @, 'is_signal',  => @token.level.name is '$signal'\n    set_getter @, 'is_system',  => @token.level.is_system\n    set_getter @, 'is_user',    => not @is_system\n    hide       @, 'source',     match.input\n    hide       @, 'emit',       @emit.bind @\n    #.......................................................................................................\n    @assign match.groups\n    @set_level token.level\n    hide_getter @, 'has_data',    =>\n      return true for _ of @data\n      return false\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _clone: ->\n    R       = clone @\n    R.data  = clone @data\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  set_level: ( level ) ->\n    ### TAINT should typecheck ###\n    @level = level\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  assign: ( P... ) -> Object.assign @data, P...\n\n  #---------------------------------------------------------------------------------------------------------\n  emit: ( fqname, start, source, data = null ) ->\n    token   = @token.grammar.token_from_fqname fqname\n    lexeme  = token._match_at start, source\n    lexeme.assign data\n    ### TAINT use API ###\n    @token.grammar.state.emitted_lexemes.unshift lexeme\n    return lexeme\n\n\n#===========================================================================================================\nclass Level\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg            ?= {}\n    @name           = cfg.name      ? 'gnd'\n    @is_system      = cfg.is_system ? false\n    @cast           = cfg.cast      ? null\n    hide @,         'grammar',  cfg.grammar\n    hide @,         'tokens',   Object.create null\n    hide_getter @,  'strategy', => @grammar.cfg.strategy\n    hide @,         'positions', new Set()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  [Symbol.iterator]: -> yield token for name, token of @tokens\n\n  #---------------------------------------------------------------------------------------------------------\n  _on_before_scan: ->\n    @positions.clear()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  new_token: ( cfg ) ->\n    R = new Token { cfg..., level: @, }\n    if Reflect.has @tokens, R.name\n      throw new Error \"Ωilx___9 encountered duplicate token name #{rpr R.name}\"\n    @tokens[ R.name ] = R\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  match_all_at: ( start, source ) ->\n    R = []\n    for token from @\n      continue unless ( lexeme = token.match_at start, source )?\n      R.push lexeme\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  match_first_at: ( start, source ) ->\n    for token from @\n      return lexeme if ( lexeme = token.match_at start, source )?\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  match_longest_at: ( start, source ) ->\n    return null         if ( lexemes = @match_all_at start, source ).length is 0\n    return lexemes[ 0 ] if lexemes.length is 1\n    ### NOTE: Because JS guarantees stable sorts, we know that in case there were several lexemes with the\n    same maximum length, the ones that come earlier in the unsorted list (which corresponds to the order in\n    that the tokens got declared) will also come earlier after sorting; hence, the first lexeme in the list\n    after sorting will be one that has both maximum length (because of the sort) *and* come earlier in the\n    list of declarations (because of sort stability): ###\n    return ( internals.sort_lexemes_by_length_dec lexemes )[ 0 ]\n\n  #---------------------------------------------------------------------------------------------------------\n  match_at: ( start, source ) ->\n    ### Loop Detection: refuse to visit same position twice ###\n    if ( not @is_system ) and @positions.has start\n      ### TAINT show source ###\n      quote   = quote_source source, start\n      message = \"encountered loop at position #{rpr start} #{quote}\"\n      switch @grammar.cfg.loop_errors\n        when 'emit' then return @grammar._new_error_signal \\\n          'Ωilx__10', 'loop', start, start, source, message\n        when 'throw' then throw new Error \"Ωilx__11 #{message}\"\n        else throw new Error \"Ωilx__12 should never happen: got unknown value for loop_errors: #{rpr @grammar.cfg.loop_errors}\"\n    @positions.add start\n    #.......................................................................................................\n    switch @strategy\n      when 'first'    then  lexeme = @match_first_at    start, source\n      when 'longest'  then  lexeme = @match_longest_at  start, source\n      else throw new Error \"Ωilx__13 should never happen: got strategy: #{rpr @strategy}\"\n    #.......................................................................................................\n    ### Accept no lexeme matching but refuse lexeme with empty match: ###\n    return null   unless lexeme?\n    return lexeme unless ( lexeme.hit is '' ) and ( not lexeme.jump? )\n    { fqname\n      start } = lexeme\n    quote     = quote_source source, lexeme.start\n    throw new Error \"Ωilx__14 encountered zero-length match for token #{rpr fqname} at position #{lexeme.start} #{quote}\"\n\n\n\n#===========================================================================================================\nclass Grammar\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg_template =\n      name:             'g'\n      strategy:         'first'\n      emit_signals:     true\n      # merge_jumps:      true\n      loop_errors:      'emit'\n      earlystop_errors: 'emit'\n      cast:             null\n      lnr:              1\n      data:             null\n      reset_lnr:        false\n      reset_data:       false\n      reset_errors:     false\n    #.......................................................................................................\n    @cfg                   ?= { cfg_template..., cfg..., }\n    # @cfg.merge_jumps        = false unless @cfg.emit_signals\n    @name                   = @cfg.name\n    @state                  = { lnr: null, errors: [], emitted_lexemes: [], }\n    @start_level_name       = null\n    hide @, 'system_tokens',  null\n    hide @, 'start_level',    null\n    hide @, 'levels',         Object.create null\n    hide @, 'cast',           @cfg.cast\n    hide @, 'data',           Object.create null\n    hide_getter @, 'has_errors', -> @state.errors.length > 0\n    #.......................................................................................................\n    @_compile_cfg_data()\n    @_add_system_levels()\n    @reset()\n    return undefined\n\n  #=========================================================================================================\n  reset_lnr: ( P... ) ->\n    if P.length isnt 0\n      throw new Error \"Ωilx__15 Grammar::cfg.reset_lnr() does not accept arguments, got #{P.length} arguments\"\n    @state.lnr = @cfg.lnr\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_cfg_data: ->\n    @cfg.data ?= {}\n    for key, descriptor of Object.getOwnPropertyDescriptors @cfg.data\n      continue unless isa std.function, descriptor.value\n      set_getter @cfg.data, key, descriptor.value.bind @\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  reset_data: ( P... ) ->\n    if P.length isnt 0\n      throw new Error \"Ωilx__16 Grammar::cfg.reset_data() does not accept arguments, got #{P.length} arguments\"\n    delete @data[ key ] for key of @data\n    @assign @data, @cfg.data\n    # ( @data[ key ] = fn.call @ ) for key, fn of @data when isa std.function, fn\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  reset: ->\n    @reset_lnr()\n    @reset_data()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  reset_errors: ->\n    @state.errors = []\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  assign: ( P... ) -> Object.assign @data, P...\n\n\n  #=========================================================================================================\n  _add_system_levels: ->\n    $signal = @new_level { name: '$signal', system: true, }\n    $error  = @new_level { name: '$error',  system: true, }\n    hide @, 'system_tokens',\n      start:      $signal.new_token { name: 'start',      fit: /|/, }\n      stop:       $signal.new_token { name: 'stop',       fit: /|/, }\n      jump:       $signal.new_token { name: 'jump',       fit: /|/, }\n      earlystop:  $error.new_token  { name: 'earlystop',  fit: /|/, }\n      loop:       $error.new_token  { name: 'loop',       fit: /|/, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  new_level: ( cfg ) ->\n    is_system = cfg.name.startsWith '$'\n    if @levels[ cfg.name ]?\n      throw new Error \"Ωilx__17 level #{rpr level.name} elready exists\"\n    level                   = new Level { cfg..., is_system, grammar: @, }\n    @levels[ level.name ]   = level\n    if ( not is_system ) and ( not @start_level? )\n      hide @, 'start_level', level\n      @start_level_name = level.name\n    return level\n\n  #=========================================================================================================\n  token_from_fqname: ( fqname ) ->\n    ### TAINT validate ###\n    unless isa std.text, fqname\n      throw new Error \"Ωilx__18 expected a text for fqname, got a #{type_of fqname}\"\n    unless ( match = fqname.match internals.fqname_re )?\n      throw new Error \"Ωilx__19 expected an fqname consisting of level name, dot, token name, got #{rpr fqname}\"\n    { level_name, token_name, } = match.groups\n    unless ( level = @levels[ level_name ] )?\n      throw new Error \"Ωilx__20 unknown level #{rpr level_name}\"\n    unless ( token = level.tokens[ token_name ] )?\n      throw new Error \"Ωilx__21 unknown token #{rpr token_name}\"\n    return token\n\n  #=========================================================================================================\n  _new_signal: ( name, start, source, data = null ) ->\n    R       = @system_tokens[ name ].match_at start, source\n    R.assign data\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_error_signal: ( ref, name, start, stop, source, message ) ->\n    R       = @system_tokens[ name ].match_at start, source\n    R.assign { message, ref, }\n    R.stop  = stop\n    R.hit   = source[ start ... stop ]\n    @state.errors.push R\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_jump_signal: ( start, source, target ) ->\n    return @_new_signal 'jump', start, source, { target, }\n\n  #=========================================================================================================\n  scan_to_list: ( P... ) -> [ ( @scan P... )..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  scan_first: ( P... ) ->\n    ### Does the entire scan to ensure that any state is what it would be with `scan()` and `scan_to_list()`\n    but returns one first user-level lexeme: ###\n    R = null\n    for lexeme from @scan P...\n      R ?= lexeme if lexeme.is_user\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  scan: ( source ) ->\n    @reset_errors() if @cfg.reset_errors\n    @reset_data()   if @cfg.reset_data\n    @_notify_levels()\n    unless @start_level?\n      throw new Error \"Ωilx__22 no levels have been defined; unable to scan\"\n    @state.stack = new Levelstack()\n    yield from @_scan_1_filter_signals source\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _notify_levels: ->\n    for level_name, level of @levels\n      level._on_before_scan()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _scan_1_filter_signals: ( source ) ->\n    if @cfg.emit_signals\n      yield from @_scan_2_merge_jumps source\n    else\n      for lexeme from @_scan_2_merge_jumps source\n        yield lexeme if lexeme.is_user or lexeme.is_error\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _scan_2_merge_jumps: ( source ) ->\n    ### Consolidate all contiguous jump signals into single signal ###\n    buffer = []\n    for lexeme from @_scan_3_validate_exhaustion source\n      #.....................................................................................................\n      if lexeme.fqname is '$signal.jump'\n        buffer.push lexeme\n        continue\n      #.....................................................................................................\n      if buffer.length is 0\n        yield lexeme\n        continue\n      #.....................................................................................................\n      if buffer.length is 1\n        yield buffer.pop()\n        yield lexeme\n        continue\n      #.....................................................................................................\n      jump                = buffer.at  0\n      ### TAINT use API? ###\n      last_jump           = buffer.at -1\n      jump.stop           = last_jump.stop\n      jump.assign { target: last_jump.data.target, }\n      buffer.length       = 0\n      yield jump\n      yield lexeme\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _scan_3_validate_exhaustion: ( source ) ->\n    is_first    = true\n    last_idx    = source.length\n    #.......................................................................................................\n    for lexeme from @_scan_4_merge source\n      switch true\n        #...................................................................................................\n        when lexeme.fqname is '$signal.stop'\n          if lexeme.stop isnt last_idx\n            message = \"expected stop at #{last_idx}, got #{rpr lexeme.stop}\"\n            switch @cfg.earlystop_errors\n              when 'emit'\n                yield @_new_error_signal 'Ωilx__23', 'earlystop', lexeme.stop, last_idx, source, \\\n                  \"expected stop at #{last_idx}, got #{rpr lexeme.stop}\"\n              when 'throw'\n                throw new Error \"Ωilx__24 #{message}\"\n        #...................................................................................................\n        when lexeme.level.name is '$signal'\n          null\n        #...................................................................................................\n        when is_first and ( lexeme.start isnt 0 )\n          yield @_new_error_signal 'Ωilx__25', 'latestart', 0, lexeme.start, source, \\\n            \"expected start at 0, got #{rpr lexeme.start}\"\n      #.....................................................................................................\n      yield lexeme\n      is_first    = false\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _scan_4_merge: ( source ) ->\n    lexemes       = []\n    active_fqname = null\n    #.......................................................................................................\n    merge_data_as_lists = ( merged, lexemes ) ->\n      R = Object.create null\n      for lexeme in lexemes\n        for key, value of lexeme.data\n          ( R[ key ] ?= [] ).push value\n      merged.assign R\n      return null\n    #.......................................................................................................\n    flush = ->\n      return null unless active_fqname?\n      merged = ( lexemes.at 0 )._clone()\n      last_lexeme = lexemes.at -1\n      merged.hit  = ( lxm.hit for lxm in lexemes ).join ''\n      merged.stop = last_lexeme.stop\n      switch merged.token.data_merge_strategy\n        when 'assign' then merged.assign ( lxm.data for lxm in lexemes )...\n        when 'call'   then merged.token.merge.call null, { merged, lexemes, }\n        when 'list'   then merge_data_as_lists merged, lexemes\n        else throw new Error \"Ωilx__26 should never happen: encountered data_merge_strategy == #{rpr merged.token.data_merge_strategy}\"\n      yield merged\n      active_fqname = null\n      lexemes.length = 0\n      return null\n    #.......................................................................................................\n    for lexeme from @_scan_5_insert_jumps source\n      if ( not lexeme.token.merge ) or lexeme.is_signal\n        yield from flush()\n        yield lexeme\n        continue\n      if lexeme.fqname is active_fqname\n        lexemes.push lexeme\n        continue\n      yield from flush()\n      active_fqname = lexeme.fqname\n      lexemes.push lexeme\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _scan_5_insert_jumps: ( source ) ->\n    prv_level_name    = null\n    #.......................................................................................................\n    for lexeme from @_scan_6_insert_startstop_lnr source\n      switch true\n        #...................................................................................................\n        when lexeme.fqname is '$signal.start'\n          yield lexeme\n          prv_level_name = @start_level.name;         yield @_new_jump_signal 0, source, prv_level_name\n        #...................................................................................................\n        when lexeme.fqname is '$signal.stop'\n          prv_level_name = null;                      yield @_new_jump_signal lexeme.start, source, prv_level_name\n          yield lexeme\n        #...................................................................................................\n        when lexeme.is_user\n          if lexeme.token.level.name isnt prv_level_name\n            prv_level_name = lexeme.token.level.name; yield @_new_jump_signal lexeme.start, source, prv_level_name\n          if lexeme.level.name isnt prv_level_name\n            prv_level_name = lexeme.level.name;       yield @_new_jump_signal lexeme.start, source, prv_level_name\n          yield lexeme if lexeme.token.emit\n        #...................................................................................................\n        else\n          yield lexeme\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _scan_6_insert_startstop_lnr: ( source ) ->\n    prv_lexeme = null\n    yield @_new_signal 'start', 0, source\n    for lexeme from @_scan_7_apply_casts source\n      prv_lexeme = lexeme unless lexeme.is_signal\n      yield lexeme\n    yield @_new_signal 'stop', ( prv_lexeme?.stop ? 0 ), source\n    @state.lnr++ unless @cfg.reset_lnr\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _scan_7_apply_casts: ( source ) ->\n    for lexeme from @_scan_8_match_tokens source\n      if lexeme.is_user\n        switch true\n          when lexeme.token.cast? then lexeme.token.cast.call @, lexeme\n          when lexeme.level.cast? then lexeme.level.cast.call @, lexeme\n          when             @cast? then             @cast.call @, lexeme\n      ### TAINT use API ###\n      yield @state.emitted_lexemes.pop() while @state.emitted_lexemes.length > 0\n      yield lexeme\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _scan_8_match_tokens: ( source ) ->\n    start           = 0\n    lexeme          = null\n    old_level_name  = null\n    stack           = @state.stack\n    stack.push @start_level\n    #.......................................................................................................\n    loop\n      level         = stack.peek()\n      new_level     = level\n      lexeme        = level.match_at start, source\n      break unless lexeme? # terminate if current level has no matching tokens\n      start         = lexeme.stop\n      #.....................................................................................................\n      if ( jump = lexeme.jump )?\n        switch jump.action\n          when 'fore' then  stack.push ( new_level = @_get_level jump.target )\n          when 'back' then  new_level = stack.popnpeek()\n          else throw new Error \"Ωilx__27 should never happen: unknown jump action #{rpr lexeme.jump.action}\"\n        if jump.carry\n          lexeme.set_level new_level\n      #.....................................................................................................\n      yield lexeme\n      ### TAINT this should really check for lexeme.terminate ###\n      break if lexeme.is_error\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_level: ( level_name ) ->\n    return R if ( R = @levels[ level_name ] )?\n    throw new Error \"Ωilx__28 unknown level #{rpr level_name}\"\n\n\n#===========================================================================================================\nmodule.exports = {\n  Token\n  Lexeme\n  Level\n  Grammar\n  internals\n  rx\n  new_regex_tag }\n\n"
  ]
}