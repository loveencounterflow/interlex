{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\n{ hide\n  hide_getter\n  debug\n  info\n  rpr                   } = require './helpers'\n#-----------------------------------------------------------------------------------------------------------\n\n\n#===========================================================================================================\ninternals = new class Internals\n  constructor: ->\n    SLR             = require 'regex'\n    #.........................................................................................................\n    ### thx to https://github.com/sindresorhus/identifier-regex ###\n    jsid_noanchor_re = SLR.regex\"\"\"   [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]*   \"\"\"\n    jsid_re         = SLR.regex\"\"\" ^ [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* $ \"\"\"\n    jump_spec_back  = '..'\n    jump_spec_re    = SLR.regex\" (?<back> ^ #{jump_spec_back} $ ) | (?<fore> #{jsid_re} )\"\n    #.........................................................................................................\n    @slevithan_regex      = SLR\n    @jsid_re              = jsid_re\n    @jump_spec_back       = jump_spec_back\n    @jump_spec_re         = jump_spec_re\n    @jump_spec_res        = [\n      { inex: 'bare',      action: 'back', matcher: SLR.regex\"^    (?<target> #{jump_spec_back}   )    $\", }\n      { inex: 'inclusive', action: 'back', matcher: SLR.regex\"^ \\] (?<target> #{jump_spec_back}   )    $\", }\n      { inex: 'exclusive', action: 'back', matcher: SLR.regex\"^    (?<target> #{jump_spec_back}   ) \\] $\", }\n      { inex: 'bare',      action: 'fore', matcher: SLR.regex\"^    (?<target> #{jsid_noanchor_re} )    $\", }\n      { inex: 'inclusive', action: 'fore', matcher: SLR.regex\"^ \\[ (?<target> #{jsid_noanchor_re} )    $\", }\n      { inex: 'exclusive', action: 'fore', matcher: SLR.regex\"^    (?<target> #{jsid_noanchor_re} ) \\[ $\", }\n      ]\n    #.......................................................................................................\n    # thx to https://github.com/loveencounterflow/coffeescript/commit/27e0e4cfee65ec7e1404240ccec6389b85ae9e69\n    @regex_flags_re             = /^(?!.*(.).*\\1)[dgimsuvy]*$/\n    @forbidden_slr_flags_re     = /[uv]/g\n    @forbidden_plain_flags_re   = /[u]/g\n    @mandatory_slr_flags_txt    = 'dy'\n    @mandatory_plain_flags_txt  = 'dvy'\n\n    #-------------------------------------------------------------------------------------------------------\n    @validate_regex_flags = ( flags ) =>\n      unless ( typeof flags ) is 'string'\n        throw new Error \"Ωilx___1 expected a text, got #{rpr flags}\"\n      unless @regex_flags_re.test flags\n        throw new Error \"Ωilx___2 illegal or duplicate flags in #{rpr flags}\"\n      return flags\n\n    #-------------------------------------------------------------------------------------------------------\n    @normalize_regex_flags = ({ flags, mode, }) =>\n      ### Given a RegExp `flags` text, sets `d`, `y`, removes `u`, `v`, and returns sorted text with unique\n      flags. ###\n      switch mode\n        when 'slr'\n          forbidden_flags_re  = @forbidden_slr_flags_re\n          mandatory_flags_txt = @mandatory_slr_flags_txt\n        when 'plain'\n          forbidden_flags_re  = @forbidden_plain_flags_re\n          mandatory_flags_txt = @mandatory_plain_flags_txt\n        else throw new Error \"Ωilx___3 internal error: unknown mode: #{rpr mode}\"\n      flags   = @validate_regex_flags flags ? ''\n      flags   = flags.replace forbidden_flags_re, ''\n      flags  += mandatory_flags_txt\n      return @get_unique_sorted_letters flags\n\n    #-------------------------------------------------------------------------------------------------------\n    @get_unique_sorted_letters = ( text ) => [ ( new Set text )..., ].sort().join ''\n\n    #-------------------------------------------------------------------------------------------------------\n    @normalize_regex = ( regex ) =>\n      ### Given a `regex`, return a new regex with the same pattern but normalized flags. ###\n      ### TAINT use proper typing ###\n      unless regex instanceof RegExp\n        throw new Error \"Ωilx___4 expected a regex, got #{rpr regex}\"\n      return new RegExp regex.source, ( @normalize_regex_flags { flags: regex.flags, mode: 'plain', } )\n\n    #-------------------------------------------------------------------------------------------------------\n    @sort_lexemes_by_length_dec = ( lexemes ) -> lexemes.sort ( a, b ) ->\n      return -1 if a.length > b.length\n      return +1 if a.length < b.length\n      return  0\n\n    #-------------------------------------------------------------------------------------------------------\n    return undefined\n\n#-----------------------------------------------------------------------------------------------------------\nnew_regex_tag = ( global_flags = null ) ->\n  { regex }     = internals.slevithan_regex\n  global_flags  = internals.normalize_regex_flags { flags: global_flags, mode: 'slr', }\n  #.........................................................................................................\n  tag_function  = ( P... ) -> ( regex global_flags ) P...\n  #.........................................................................................................\n  return new Proxy tag_function,\n    get: ( target, key ) ->\n      return undefined unless typeof key is 'string'\n      flags = global_flags + key\n      flags = internals.get_unique_sorted_letters   flags\n      flags = internals.normalize_regex_flags     { flags, mode: 'slr', }\n      return regex flags\n\n#-----------------------------------------------------------------------------------------------------------\nrx = new_regex_tag()\n\n\n#===========================================================================================================\nclass Token\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @name       = cfg.name\n    cfg.matcher = internals.normalize_regex cfg.matcher\n    hide @, 'level',        cfg.level\n    hide @, 'grammar',      cfg.level.grammar\n    hide @, 'matcher',      cfg.matcher\n    hide @, 'jump',         ( @constructor._parse_jump cfg.jump, @level ) ? null\n    hide @, 'jump_spec',    ( cfg.jump                                  ) ? null\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  match_at: ( start, source ) ->\n    @matcher.lastIndex = start\n    return null unless ( match = source.match @matcher )?\n    return new Lexeme @, match\n\n  #---------------------------------------------------------------------------------------------------------\n  @_parse_jump: ( jump_spec, level = null ) ->\n    return null unless jump_spec?\n    match = null\n    for { inex, action, matcher, } in internals.jump_spec_res\n      break if ( match = jump_spec.match matcher )?\n    unless match?\n      throw new Error \"Ωilx___5 encountered illegal jump spec #{rpr jump_spec}\"\n    # info 'Ωilxt___6', { jump_spec, inex, action, match.groups..., }\n    { target, } = match.groups\n    if level? and ( target is level.name )\n      throw new Error \"Ωilx___7 cannot jump to same level, got #{rpr target}\"\n    return { jump_spec, inex, action, target, }\n\n\n#===========================================================================================================\nclass Lexeme\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( token, match ) ->\n    @name                         = token.name\n    @fqname                       = \"#{token.level.name}.#{token.name}\"\n    @level                        = token.level\n    @hit                          = match[ 0 ]\n    @start                        = match.index\n    @stop                         = @start + @hit.length\n    @length                       = @hit.length\n    @groups                       = match.groups ? null\n    @jump                         = token.jump\n    @jump_spec                    = token.jump_spec\n    grammar                       = token.grammar\n    @[ grammar.cfg.counter_name ] = grammar.state.count\n    return undefined\n\n\n#===========================================================================================================\nclass Level\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg            ?= {}\n    @name           = cfg.name ? 'gnd'\n    hide @,         'grammar',  cfg.grammar\n    hide @,         'tokens',   [ ( cfg.tokens ? [] )..., ]\n    hide_getter @,  'strategy', => @grammar.cfg.strategy\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  [Symbol.iterator]: -> yield t for t in @tokens\n\n  #---------------------------------------------------------------------------------------------------------\n  new_token: ( cfg ) ->\n    if cfg.level? and cfg.level isnt @\n      throw new Error \"Ωilx___8 inconsistent level\"\n    @tokens.push token = new Token { cfg..., level: @, }\n    return token\n\n  #---------------------------------------------------------------------------------------------------------\n  match_all_at: ( start, source ) ->\n    R = []\n    for token from @\n      continue unless ( lexeme = token.match_at start, source )?\n      R.push lexeme\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  match_first_at: ( start, source ) ->\n    for token from @\n      return lexeme if ( lexeme = token.match_at start, source )?\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  match_longest_at: ( start, source ) ->\n    return null         if ( lexemes = @match_all_at start, source ).length is 0\n    return lexemes[ 0 ] if lexemes.length is 1\n    ### NOTE: Because JS guarantees stable sorts, we know that in case there were several lexemes with the\n    same maximum length, the ones that come earlier in the unsorted list (which corresponds to the order in\n    that the tokens got declared) will also come earlier after sorting; hence, the first lexeme in the list\n    after sorting will be one that has both maximum length (because of the sort) *and* come earlier in the\n    list of declarations (because of sort stability): ###\n    return ( internals.sort_lexemes_by_length_dec lexemes )[ 0 ]\n\n  #---------------------------------------------------------------------------------------------------------\n  match_at: ( start, source ) ->\n    switch @strategy\n      when 'first'    then  lexeme = @match_first_at    start, source\n      when 'longest'  then  lexeme = @match_longest_at  start, source\n      else throw new Error \"Ωilx___9 should never happen: got strategy: #{rpr @strategy}\"\n    #.......................................................................................................\n    ### Accept no lexeme matching but refuse lexeme with empty match: ###\n    return null   unless lexeme?\n    return lexeme unless lexeme.hit is ''\n    { fqname\n      start } = lexeme\n    snippet   = source[ start - 10 ... start ] + '⚠' + source[ start .. start + 10 ]\n    throw new Error \"Ωilx__10 encountered zero-length match for token #{rpr fqname} at position #{lexeme.start} (indicated by '⚠': #{rpr snippet})\"\n\n\n#===========================================================================================================\nclass Stack\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( P... ) ->\n    @data = Array.from P...\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  is_empty: -> @data.length is 0\n\n  #---------------------------------------------------------------------------------------------------------\n  peek: ->\n    if @is_empty()\n      throw new Error \"stack is empty\"\n    return @data.at -1\n\n  #---------------------------------------------------------------------------------------------------------\n  pop: ->\n    if @is_empty()\n      throw new Error \"stack is empty\"\n    return @data.pop()\n\n  #---------------------------------------------------------------------------------------------------------\n  push: ( P... ) -> @data.push P...\n\n\n#===========================================================================================================\nclass Grammar\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg_template          =\n      name:                 'g'\n      counter_name:         'line_nr'\n      counter_value:        1\n      counter_step:         1\n      strategy:             'first'\n    @cfg                 ?= { cfg_template..., cfg..., }\n    @name                 = @cfg.name\n    @state                = { count: null, }\n    @reset_count()\n    @start_level_name     = null\n    hide @, 'start_level',  null\n    hide @, 'levels',       {}\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  reset_count: ->\n    @state.count = @cfg.counter_value\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  new_level: ( cfg ) ->\n    if @levels[ cfg.name ]?\n      throw new Error \"Ωilx__11 level #{rpr level.name} elready exists\"\n    level                   = new Level { cfg..., grammar: @, }\n    @levels[ level.name ]   = level\n    unless @start_level?\n      hide @, 'start_level', level\n      @start_level_name = level.name\n    return level\n\n  #---------------------------------------------------------------------------------------------------------\n  get_lexemes: ( P... ) -> [ ( @walk_lexemes P... )..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_lexemes: ( source ) ->\n    start   = 0\n    stack   = new Stack [ @start_level, ]\n    lexeme  = null\n    #.......................................................................................................\n    loop\n      level         = stack.peek()\n      lexeme        = level.match_at start, source\n      break unless lexeme? # terminate if current level has no matching tokens\n      @state.count += @cfg.counter_step\n      start         = lexeme.stop\n      #.....................................................................................................\n      if ( jump = lexeme.jump )? then switch jump.action\n        when 'fore' then  stack.push ( new_level = @_get_level jump.target )\n        when 'back' then  new_level = stack.pop()\n        else throw new Error \"Ωilx__12 should never happen: unknown jump action #{rpr lexeme.jump.action}\"\n      #.....................................................................................................\n      yield lexeme\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_level: ( level_name ) ->\n    return R if ( R = @levels[ level_name ] )?\n    throw new Error \"Ωilx__13 unknown level #{rpr level_name}\"\n\n  #===========================================================================================================\n  ###\n  `Token` defines `matcher`, can jump into a level or back\n  `Level` has one or more `Token`s\n  `Grammar` has one or more `Level`s\n  `Lexeme` produced by a `Token` instance when matcher matches source\n\n  ###\n\n\nmodule.exports = {\n  Token\n  Lexeme\n  Level\n  Grammar\n  internals\n  rx\n  new_regex_tag }\n\n"
  ]
}