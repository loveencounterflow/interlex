{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,OAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,qBAAA,EAAA,KAAA,EAAA,IAAA,EAAA,oBAAA,EAAA,IAAA,EAAA,IAAA,EAAA,eAAA,EAAA,OAAA,EAAA,KAAA,EAAA,GAAA,EAAA;;EAEA,CAAA,CAAE,IAAF,EACE,oBADF,EAEE,qBAFF,EAGE,KAHF,EAIE,IAJF,EAKE,GALF,CAAA,GAK4B,OAAA,CAAQ,WAAR,CAL5B;;EAQA,CAAA,CAAE,OAAF,EAAW,KAAX,CAAA,GAAsB,OAAA,CAAQ,OAAR,CAAtB,EAVA;;;EAYA,EAAA,GAAQ,KAAA,CAAM,GAAN,EAZR;;;EAeA,eAAA,GAAkB,KAAK,CAAA;;;;;GAAA,EAfvB;;;EAwBM,QAAN,MAAA,MAAA,CAAA;;IAGE,WAAa,CAAE,GAAF,CAAA;AACf,UAAA,GAAA,EAAA;MAAI,KAAA,CAAM,OAAN,EAAe,WAAf,EAA4B,GAAG,CAAC,IAAhC,EAAsC,GAAG,CAAC,KAA1C,EAAiD,GAAG,CAAC,KAAK,CAAC,OAA3D;MACA,IAAC,CAAA,IAAD,GAAQ,GAAG,CAAC;MACZ,IAAA,CAAK,IAAL,EAAQ,OAAR,EAAwB,GAAG,CAAC,KAA5B;MACA,IAAA,CAAK,IAAL,EAAQ,SAAR,EAAwB,GAAG,CAAC,KAAK,CAAC,OAAlC;MACA,IAAA,CAAK,IAAL,EAAQ,SAAR,EAAwB,GAAG,CAAC,OAA5B;MACA,IAAA,CAAK,IAAL,EAAQ,MAAR,EAAwB,IAAC,CAAA,UAAD,kCAAwB,IAAxB,CAAxB;MACA,IAAA,CAAK,IAAL,EAAQ,cAAR,qCAAgD,IAAhD;AACA,aAAO;IARI,CADf;;;IAYE,QAAU,CAAE,KAAF,EAAS,IAAT,CAAA;AACZ,UAAA;MAAI,IAAC,CAAA,OAAO,CAAC,SAAT,GAAqB;MACrB,IAAmB,0CAAnB;AAAA,eAAO,KAAP;;AACA,aAAO,IAAI,MAAJ,CAAW,IAAX,EAAc,KAAd;IAHC,CAZZ;;;IAkBE,UAAY,CAAE,YAAF,CAAA;AACd,UAAA,MAAA,EAAA,QAAA,EAAA,GAAA,EAAA,KAAA,EAAA,UAAA,EAAA,KAAA,EAAA;MAAI,IAAmB,oBAAnB;AAAA,eAAO,KAAP;OAAJ;;MAEI,IAAO,qDAAP;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,+CAAA,CAAA,CAAkD,GAAA,CAAI,YAAJ,CAAlD,CAAA,CAAV,EADR;;AAEA;MAAA,KAAA,UAAA;;QACE,IAAgB,kBAAhB;AAAA,mBAAA;;QACA,CAAE,QAAF,EAAY,MAAZ,CAAA,GAAwB,GAAG,CAAC,KAAJ,CAAU,GAAV;AACxB;MAHF;MAIA,IAAG,UAAA,KAAc,GAAjB;QACE,KAAA,GAAQ,WADV;OAAA,MAEK,IAAO,iDAAP;QACH,MAAM,IAAI,KAAJ,CAAU,CAAA,0CAAA,CAAA,CAA6C,GAAA,CAAI,UAAJ,CAA7C,CAAA,CAAV,EADH;;AAEL,aAAO,CAAE,QAAF,EAAY,MAAZ,EAAoB,KAApB;IAbG;;EApBd,EAxBA;;;EA6DM,SAAN,MAAA,OAAA,CAAA;;IAGE,WAAa,CAAE,KAAF,EAAS,KAAT,CAAA;AACf,UAAA,GAAA;;;MAEI,IAAC,CAAA,IAAD,GAAgB,KAAK,CAAC;MACtB,IAAC,CAAA,MAAD,GAAgB,CAAA,CAAA,CAAG,KAAK,CAAC,KAAK,CAAC,IAAf,CAAA,CAAA,CAAA,CAAuB,KAAK,CAAC,IAA7B,CAAA;MAChB,IAAC,CAAA,KAAD,GAAgB,KAAK,CAAC;MACtB,IAAC,CAAA,GAAD,GAAgB,KAAK,CAAE,CAAF;MACrB,IAAC,CAAA,KAAD,GAAgB,KAAK,CAAC;MACtB,IAAC,CAAA,IAAD,GAAgB,IAAC,CAAA,KAAD,GAAS,IAAC,CAAA,GAAG,CAAC;MAC9B,IAAC,CAAA,MAAD,wCAA+B;MAC/B,IAAC,CAAA,IAAD,GAAgB,KAAK,CAAC;MACtB,IAAC,CAAA,YAAD,GAAgB,KAAK,CAAC;AACtB,aAAO;IAZI;;EAHf,EA7DA;;;EAgFM,QAAN,MAAA,MAAA,CAAA;;IAGE,WAAa,CAAE,GAAF,CAAA;AACf,UAAA,GAAA,EAAA;;QAAI,MAAU,CAAA;;MACV,IAAC,CAAA,IAAD,oCAAqB;MACrB,IAAA,CAAK,IAAL,EAAQ,SAAR,EAAoB,GAAG,CAAC,OAAxB;MACA,IAAA,CAAK,IAAL,EAAQ,QAAR,EAAoB,CAAE,GAAA,sCAAe,EAAf,CAAF,CAApB;AACA,aAAO;IALI,CADf;;;IASqB,EAAnB,CAAC,MAAM,CAAC,QAAR,CAAmB,CAAA,CAAA;AAAE,UAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA;AAAC;AAAA;MAAA,KAAA,qCAAA;;qBAAA,CAAA,MAAM,CAAN;MAAA,CAAA;;IAAH,CATrB;;;IAYE,SAAW,CAAE,GAAF,CAAA;AACb,UAAA;MAAI,IAAG,mBAAA,IAAe,GAAG,CAAC,KAAJ,KAAe,IAAjC;QACE,MAAM,IAAI,KAAJ,CAAU,0BAAV,EADR;;MAEA,IAAC,CAAA,MAAM,CAAC,IAAR,CAAa,KAAA,GAAQ,IAAI,KAAJ,CAAU;QAAE,GAAA,GAAF;QAAU,KAAA,EAAO;MAAjB,CAAV,CAArB;AACA,aAAO;IAJE;;EAdb,EAhFA;;;EAqGM,UAAN,MAAA,QAAA,CAAA;;IAGE,WAAa,CAAE,GAAF,CAAA;AACf,UAAA,GAAA,EAAA;;QAAI,MAAoB,CAAA;;MACpB,IAAC,CAAA,IAAD,oCAA+B;MAC/B,IAAC,CAAA,UAAD,GAAoB;MACpB,IAAA,CAAK,IAAL,EAAQ,OAAR,EAAoB,IAApB;MACA,IAAA,CAAK,IAAL,EAAQ,QAAR,EAAoB,CAAE,GAAA,sCAAe,CAAA,CAAf,CAAF,CAApB;AACA,aAAO;IANI,CADf;;;IAUE,SAAW,CAAE,GAAF,CAAA;AACb,UAAA;MAAI,IAAG,6BAAH;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,YAAA,CAAA,CAAe,GAAA,CAAI,KAAK,CAAC,IAAV,CAAf,CAAA,eAAA,CAAV,EADR;;MAEA,KAAA,GAA0B,IAAI,KAAJ,CAAU;QAAE,GAAA,GAAF;QAAU,OAAA,EAAS;MAAnB,CAAV;MAC1B,IAAC,CAAA,MAAM,CAAE,KAAK,CAAC,IAAR,CAAP,GAA0B;;QAC1B,IAAC,CAAA,QAAyB;;;QAC1B,IAAC,CAAA,aAAyB,KAAK,CAAC;;AAChC,aAAO;IAPE,CAVb;;;IAoBE,QAAU,CAAE,MAAF,CAAA;AACZ,UAAA,MAAA,EAAA,MAAA,EAAA,UAAA,EAAA,GAAA,EAAA,IAAA,EAAA,YAAA,EAAA,QAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA;MAAI,KAAA,GAAU;MACV,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,MAAJ,CAAd;MACA,KAAA,GAAU,IAAC,CAAA;AACX,aAAA,IAAA;QACE,MAAA,GAAU;QACV,KAAA,YAAA;UACE,IAAS,gDAAT;AAAA,kBAAA;;QADF;QAEA,IAAa,cAAb;AAAA,gBAAA;;QACA,CAAA,CAAE,IAAF,EACE,MADF,EAEE,IAFF,EAGE,GAHF,EAIE,IAJF,EAKE,YALF,EAME,MANF,CAAA,GAMc,MANd;QAOA,UAAA,GAAiB,cAAH,GAAmB,GAAA,CAAI,CAAE,GAAA,MAAF,CAAJ,CAAnB,GAA6C;QAC3D,QAAA,0BAAc,eAAe;QAC7B,IAAA,CAAK,OAAL,EAAc,CAAC,CAAA,CAAA,CAAG,KAAH,CAAA,QAAA,CAAA,CAAmB,IAAnB,CAAA,QAAA,CAAA,CAAkC,MAAlC,CAAA,OAAA,CAAA,CAAkD,GAAA,CAAI,GAAJ,CAAlD,CAAA,OAAA,CAAA,CAAmE,QAAnE,CAAA,OAAA,CAAA,CAAqF,UAArF,CAAA,CAAf;QACA,KAAA,GAAY;MAfd;AAgBA,aAAO;IApBC;;EAtBZ,EArGA;;;;;;;;;;EA2JA,IAAA,GAAO,QAAA,CAAA,CAAA;AACP,QAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,SAAA,EAAA,QAAA,EAAA,QAAA,EAAA,IAAA,EAAA,KAAA,EAAA;IAAE,CAAA,CAAE,CAAF,CAAA,GAAQ,OAAA,CAAQ,iBAAR,CAAR,EAAF;;IAEE,SAAA,GAAY,QAAA,CAAE,YAAF,CAAA;AACd,UAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA;MAAI,IAAG,qDAAH;AACE;QAAA,KAAA,UAAA;;UACE,IAAgB,aAAhB;AAAA,qBAAA;;UACA,IAAA,CAAK,OAAL,EAAgB,GAAA,CAAI,YAAJ,CAAhB,EAAsC,GAAG,CAAC,GAAG,CAAC,IAAR,CAAa,GAAb,CAAtC,EAA4D,GAAA,CAAI,KAAJ,CAA5D;QAFF,CADF;OAAA,MAAA;QAKE,IAAA,CAAK,OAAL,EAAgB,GAAA,CAAI,YAAJ,CAAhB,EAAoC,IAApC,EALF;;AAMA,aAAO;IAPG;IAQZ,SAAA,CAAU,KAAV;IACA,SAAA,CAAU,OAAV;IACA,SAAA,CAAU,MAAV;IACA,SAAA,CAAU,MAAV;IACA,SAAA,CAAU,WAAV;IACA,SAAA,CAAU,WAAV;IACA,SAAA,CAAU,MAAV;IACA,SAAA,CAAU,MAAV;IACA,SAAA,CAAU,IAAV;IACA,SAAA,CAAU,IAAV,EAnBF;;IAqBE,CAAA,GAAY,IAAI,OAAJ,CAAY;MAAE,IAAA,EAAM;IAAR,CAAZ;IACZ,GAAA,GAAY,CAAC,CAAC,SAAF,CAAY;MAAE,IAAA,EAAM;IAAR,CAAZ;IACZ,QAAA,GAAY,CAAC,CAAC,SAAF,CAAY;MAAE,IAAA,EAAM;IAAR,CAAZ;IACZ,QAAA,GAAY,CAAC,CAAC,SAAF,CAAY;MAAE,IAAA,EAAM;IAAR,CAAZ,EAxBd;;IA0BE,GAAG,CAAC,SAAJ,CAAoB;MAAE,IAAA,EAAM,MAAR;MAA0B,OAAA,EAAS,EAAE,CAAA,uBAAA;IAArC,CAApB;IACA,GAAG,CAAC,SAAJ,CAAoB;MAAE,IAAA,EAAM,QAAR;MAA0B,OAAA,EAAS,EAAE,CAAA,MAAA;IAArC,CAApB;IACA,GAAG,CAAC,SAAJ,CAAoB;MAAE,IAAA,EAAM,gBAAR;MAA0B,OAAA,EAAS,EAAE,CAAA,QAAA,CAArC;MAAgE,IAAA,EAAM;IAAtE,CAApB;IACA,GAAG,CAAC,SAAJ,CAAoB;MAAE,IAAA,EAAM,gBAAR;MAA0B,OAAA,EAAS,EAAE,CAAA,QAAA,CAArC;MAAgE,IAAA,EAAM;IAAtE,CAApB;IACA,GAAG,CAAC,SAAJ,CAAoB;MAAE,IAAA,EAAM,aAAR;MAA0B,OAAA,EAAS,EAAE,CAAA,EAAA;IAArC,CAApB;IACA,GAAG,CAAC,SAAJ,CAAoB;MAAE,IAAA,EAAM,YAAR;MAA0B,OAAA,EAAS,EAAE,CAAA,EAAA;IAArC,CAApB;IACA,GAAG,CAAC,SAAJ,CAAoB;MAAE,IAAA,EAAM,OAAR;MAA0B,OAAA,EAAS,EAAE,CAAA,YAAA;IAArC,CAApB;IACA,GAAG,CAAC,SAAJ,CAAoB;MAAE,IAAA,EAAM,IAAR;MAA0B,OAAA,EAAS,EAAE,CAAA,GAAA;IAArC,CAApB,EAjCF;;IAmCE,QAAQ,CAAC,SAAT,CAAoB;MAAE,IAAA,EAAM,eAAR;MAA0B,OAAA,EAAS,EAAE,CAAA,CAAA,CAArC;MAAgE,IAAA,EAAM;IAAtE,CAApB;IACA,QAAQ,CAAC,SAAT,CAAoB;MAAE,IAAA,EAAM,MAAR;MAA0B,OAAA,EAAS,EAAE,CAAA,KAAA;IAArC,CAApB,EApCF;;IAsCE,KAAA,CAAM,OAAN,EAAe,CAAf;IACA,KAAA,CAAM,OAAN,EAAe,CAAC,CAAC,MAAjB;IACA,KAAA,CAAM,OAAN,EAAe,CAAC,CAAC,MAAM,CAAC,GAAxB;IACA,KAAA,CAAM,OAAN,EAAe,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,MAA5B;IACA,KAAA,CAAM,OAAN,EAAe,GAAf;IACA,KAAA,YAAA;MAAA,KAAA,CAAM,OAAN,EAAe,KAAf;IAAA,CA3CF;;IA6CE,KAAA,GAAQ,CACN,qCADM,EAEN,qCAFM,EA7CV;;IAkDE,KAAA,uCAAA;;MACE,CAAC,CAAC,QAAF,CAAW,IAAX;IADF,CAlDF;;AAqDE,WAAO;EAtDF,EA3JP;;;EAqNA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAA+B,MAAS,CAAA,CAAA,CAAA,GAAA;aACtC,IAAA,CAAA;IADsC,CAAA,IAAxC;;AArNA",
  "sourcesContent": [
    "\n\n'use strict'\n\n{ hide\n  get_instance_methods\n  bind_instance_methods\n  debug\n  info\n  rpr                   } = require './helpers'\n\n\n{ partial, regex, } = require 'regex'\n# hide  = ( owner, name, value ) -> Object.defineProperty owner, name, { enumerable: false, value, writable: true, }\nrx    = regex 'y'\n\n#===========================================================================================================\njump_literal_re = regex\"\"\"\n  ^(\n  \\[ (?<exclusive_jump> [^ \\^ . \\s \\[ \\] ]+ )     |\n     (?<inclusive_jump> [^ \\^ . \\s \\[ \\] ]+ ) \\[  |\n  \\] (?<exclusive_back> [     .          ]  )     |\n     (?<inclusive_back> [     .          ]  ) \\]\n  )$ \"\"\"\n\n#===========================================================================================================\nclass Token\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    debug 'Ω___1', \"new Token\", cfg.name, cfg.level, cfg.level.grammar\n    @name = cfg.name\n    hide @, 'level',        cfg.level\n    hide @, 'grammar',      cfg.level.grammar\n    hide @, 'matcher',      cfg.matcher\n    hide @, 'jump',         @parse_jump cfg.jump  ? null\n    hide @, 'jump_literal', cfg.jump              ? null\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  match_at: ( start, text ) ->\n    @matcher.lastIndex = start\n    return null unless ( match = text.match @matcher )?\n    return new Lexeme @, match\n\n  #---------------------------------------------------------------------------------------------------------\n  parse_jump: ( jump_literal ) ->\n    return null unless jump_literal?\n    ### TAINT use cleartype ###\n    unless ( match = jump_literal.match jump_literal_re )?\n      throw new Error \"Ω___2 expected a well-formed jump literal, got #{rpr jump_literal}\"\n    for key, level_name of match.groups\n      continue unless level_name?\n      [ affinity, action, ] = key.split '_'\n      break\n    if level_name is '.'\n      level = level_name\n    else unless ( level = @grammar.levels[ level_name ] )?\n      throw new Error \"Ω___3 expected name of a known level, got #{rpr level_name}\"\n    return { affinity, action, level, }\n\n\n#===========================================================================================================\nclass Lexeme\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( token, match ) ->\n    # debug 'Ω___4', token\n    # debug 'Ω___5', token.jump, token.grammar.levels[ token.jump.level ] if token.jump?\n    @name         = token.name\n    @fqname       = \"#{token.level.name}.#{token.name}\"\n    @level        = token.level\n    @hit          = match[ 0 ]\n    @start        = match.index\n    @stop         = @start + @hit.length\n    @groups       = match.groups ? null\n    @jump         = token.jump\n    @jump_literal = token.jump_literal\n    return undefined\n\n\n#===========================================================================================================\nclass Level\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg    ?= {}\n    @name   = cfg.name ? 'gnd'\n    hide @, 'grammar',  cfg.grammar\n    hide @, 'tokens',   [ ( cfg.tokens ? [] )..., ]\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  [Symbol.iterator]: -> yield t for t in @tokens\n\n  #---------------------------------------------------------------------------------------------------------\n  new_token: ( cfg ) ->\n    if cfg.level? and cfg.level isnt @\n      throw new Error \"Ω___6 inconsistent level\"\n    @tokens.push token = new Token { cfg..., level: @, }\n    return token\n\n#===========================================================================================================\nclass Grammar\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    cfg              ?= {}\n    @name             = cfg.name ? 'g'\n    @start_name       = null\n    hide @, 'start',    null\n    hide @, 'levels',   { ( cfg.levels ? {} )..., }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  new_level: ( cfg ) ->\n    if @levels[ cfg.name ]?\n      throw new Error \"Ω___7 level #{rpr level.name} elready exists\"\n    level                   = new Level { cfg..., grammar: @, }\n    @levels[ level.name ]   = level\n    @start                 ?= level\n    @start_name            ?= level.name\n    return level\n\n  #---------------------------------------------------------------------------------------------------------\n  tokenize: ( source ) ->\n    start   = 0\n    info 'Ω___8', rpr source\n    level   = @start\n    loop\n      lexeme  = null\n      for token from gnd\n        break if ( lexeme = token.match_at start, source )?\n      break unless lexeme?\n      { name\n        fqname\n        stop\n        hit\n        jump\n        jump_literal\n        groups  } = lexeme\n      groups_rpr  = if groups?  then ( rpr { groups..., } ) else ''\n      jump_rpr    = jump_literal ? ''\n      info 'Ω___9', f\"#{start}:>3.0f;:#{stop}:<3.0f; #{fqname}:<20c; #{rpr hit}:<30c; #{jump_rpr}:<15c; #{groups_rpr}\"\n      start     = stop\n    return null\n\n\n  #===========================================================================================================\n  ###\n  `Token` defines `matcher`, can jump into a level or back\n  `Level` has one or more `Token`s\n  `Grammar` has one or more `Level`s\n  `Lexeme` produced by a `Token` instance when matcher matches source\n\n  ###\n\ndemo = ->\n  { f } = require '../../effstring'\n  #===========================================================================================================\n  show_jump = ( jump_literal ) ->\n    if ( match = jump_literal.match jump_literal_re  )?\n      for key, value of match.groups\n        continue unless value?\n        info 'Ω__10', ( rpr jump_literal ), ( GUY.trm.grey key ), ( rpr value )\n    else\n      info 'Ω__11', ( rpr jump_literal ), null\n    return null\n  show_jump 'abc'\n  show_jump '[abc['\n  show_jump '[abc'\n  show_jump 'abc['\n  show_jump '[string11'\n  show_jump 'string11['\n  show_jump 'abc]'\n  show_jump ']abc'\n  show_jump '.]'\n  show_jump '].'\n  #===========================================================================================================\n  g         = new Grammar { name: 'g', }\n  gnd       = g.new_level { name: 'gnd', }\n  string11  = g.new_level { name: 'string11', }\n  string12  = g.new_level { name: 'string12', }\n  #.........................................................................................................\n  gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]*\", }\n  gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                  }\n  gnd.new_token       { name: 'string11_start', matcher: rx\"(?!<\\\\)'\",                jump: 'string11[', }\n  gnd.new_token       { name: 'string12_start', matcher: rx'(?!<\\\\)\"',                jump: 'string12[', }\n  gnd.new_token       { name: 'paren_start',    matcher: rx\"\\(\",                      }\n  gnd.new_token       { name: 'paren_stop',     matcher: rx\"\\)\",                      }\n  gnd.new_token       { name: 'other',          matcher: rx\"[A-Za-z0-9]+\",            }\n  gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                     }\n  #.........................................................................................................\n  string11.new_token  { name: 'string11_stop',  matcher: rx\"'\",                       jump: '].', }\n  string11.new_token  { name: 'text',           matcher: rx\"[^']*\",                   }\n  #.........................................................................................................\n  debug 'Ω__12', g\n  debug 'Ω__13', g.levels\n  debug 'Ω__14', g.levels.gnd\n  debug 'Ω__15', g.levels.gnd.tokens\n  debug 'Ω__16', gnd\n  debug 'Ω__17', token for token from gnd\n  #.........................................................................................................\n  texts = [\n    \"Alice in Cairo 1912 (approximately)\"\n    \"Alice in Cairo 1912 'approximately'\"\n    ]\n  #.........................................................................................................\n  for text in texts\n    g.tokenize text\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  demo()\n"
  ]
}